
STM32_LAB4_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000370c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800383c  0800383c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800383c  0800383c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200000c0  08003904  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003904  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d6b  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002990  00000000  00000000  00030e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000337e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d3e  00000000  00000000  00034cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f056  00000000  00000000  0004ea36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086df1  00000000  00000000  0005da8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e487d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cfc  00000000  00000000  000e48d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003800 	.word	0x08003800

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08003800 	.word	0x08003800

0800014c <readButton>:
int KeyReg1[no_button] = {NORMAL_STATE};
int KeyReg2[no_button] = {NORMAL_STATE};

int KeyReg3[no_button] = {NORMAL_STATE};

GPIO_PinState readButton(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (index){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b02      	cmp	r3, #2
 8000158:	d016      	beq.n	8000188 <readButton+0x3c>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b02      	cmp	r3, #2
 800015e:	dc1a      	bgt.n	8000196 <readButton+0x4a>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d003      	beq.n	800016e <readButton+0x22>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d006      	beq.n	800017a <readButton+0x2e>
 800016c:	e013      	b.n	8000196 <readButton+0x4a>
	case BUTTON0:
		return HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	480b      	ldr	r0, [pc, #44]	; (80001a0 <readButton+0x54>)
 8000172:	f002 fa57 	bl	8002624 <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	e00e      	b.n	8000198 <readButton+0x4c>
	case BUTTON1:
		return HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	4808      	ldr	r0, [pc, #32]	; (80001a0 <readButton+0x54>)
 8000180:	f002 fa50 	bl	8002624 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	e007      	b.n	8000198 <readButton+0x4c>
	case BUTTON2:
		return HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <readButton+0x54>)
 800018e:	f002 fa49 	bl	8002624 <HAL_GPIO_ReadPin>
 8000192:	4603      	mov	r3, r0
 8000194:	e000      	b.n	8000198 <readButton+0x4c>
	default:
		return SET;
 8000196:	2301      	movs	r3, #1
		break;
	}
}
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010800 	.word	0x40010800

080001a4 <isButtonPressed>:

int isButtonPressed(int index){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 80001ac:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <isButtonPressed+0x30>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <isButtonPressed+0x30>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2100      	movs	r1, #0
 80001be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <isButtonPressed+0x24>
	}
	return 0;
 80001c6:	2300      	movs	r3, #0
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200000dc 	.word	0x200000dc

080001d8 <getKeyInput>:

void getKeyInput(int index){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	KeyReg0[index] = KeyReg1[index];
 80001e0:	4a33      	ldr	r2, [pc, #204]	; (80002b0 <getKeyInput+0xd8>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4932      	ldr	r1, [pc, #200]	; (80002b4 <getKeyInput+0xdc>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[index] = KeyReg2[index];
 80001f0:	4a31      	ldr	r2, [pc, #196]	; (80002b8 <getKeyInput+0xe0>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492d      	ldr	r1, [pc, #180]	; (80002b0 <getKeyInput+0xd8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[index] = readButton(index);
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f7ff ffa3 	bl	800014c <readButton>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a2b      	ldr	r2, [pc, #172]	; (80002b8 <getKeyInput+0xe0>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if(KeyReg0[index] == KeyReg1[index] && KeyReg1[index] == KeyReg2[index]){
 8000212:	4a28      	ldr	r2, [pc, #160]	; (80002b4 <getKeyInput+0xdc>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4925      	ldr	r1, [pc, #148]	; (80002b0 <getKeyInput+0xd8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d13f      	bne.n	80002a6 <getKeyInput+0xce>
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <getKeyInput+0xd8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4922      	ldr	r1, [pc, #136]	; (80002b8 <getKeyInput+0xe0>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d135      	bne.n	80002a6 <getKeyInput+0xce>
		if(KeyReg2[index] != KeyReg3[index]){
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <getKeyInput+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	491e      	ldr	r1, [pc, #120]	; (80002bc <getKeyInput+0xe4>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024a:	429a      	cmp	r2, r3
 800024c:	d017      	beq.n	800027e <getKeyInput+0xa6>
			KeyReg3[index] = KeyReg2[index];
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <getKeyInput+0xe0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	4919      	ldr	r1, [pc, #100]	; (80002bc <getKeyInput+0xe4>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(KeyReg2[index] == PRESSED_STATE){
 800025e:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <getKeyInput+0xe0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d11d      	bne.n	80002a6 <getKeyInput+0xce>
				button_flag[index] = 1;
 800026a:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <getKeyInput+0xe8>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2101      	movs	r1, #1
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(index, TimerForKeyPress);
 8000274:	21c8      	movs	r1, #200	; 0xc8
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f001 fd40 	bl	8001cfc <setTimer>
					KeyReg3[index] = NORMAL_STATE;
				}
			}
		}
	}
}
 800027c:	e013      	b.n	80002a6 <getKeyInput+0xce>
			runTimer(index);
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f001 fd54 	bl	8001d2c <runTimer>
			if(timer_flag[index] == 1){
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <getKeyInput+0xec>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10a      	bne.n	80002a6 <getKeyInput+0xce>
				if(KeyReg2[index] == PRESSED_STATE){
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <getKeyInput+0xe0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d104      	bne.n	80002a6 <getKeyInput+0xce>
					KeyReg3[index] = NORMAL_STATE;
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <getKeyInput+0xe4>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2101      	movs	r1, #1
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000018 	.word	0x20000018
 80002bc:	20000024 	.word	0x20000024
 80002c0:	200000dc 	.word	0x200000dc
 80002c4:	20000194 	.word	0x20000194

080002c8 <AllKeyInput>:

void AllKeyInput(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
	for(int i = 0; i< no_button; i++){
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	e005      	b.n	80002e0 <AllKeyInput+0x18>
		getKeyInput(i);
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ff7f 	bl	80001d8 <getKeyInput>
	for(int i = 0; i< no_button; i++){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	ddf6      	ble.n	80002d4 <AllKeyInput+0xc>
	}
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <fsm_automatic_run1>:
 *      Author: Acer
 */

#include "fsm_automatic.h"

void fsm_automatic_run1(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	switch(statusLed1){
 80002f4:	4b53      	ldr	r3, [pc, #332]	; (8000444 <fsm_automatic_run1+0x154>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	f200 8096 	bhi.w	800042c <fsm_automatic_run1+0x13c>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <fsm_automatic_run1+0x18>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	08000319 	.word	0x08000319
 800030c:	08000355 	.word	0x08000355
 8000310:	0800039d 	.word	0x0800039d
 8000314:	080003e5 	.word	0x080003e5
		case INIT:
			setRed1(OFF);
 8000318:	2000      	movs	r0, #0
 800031a:	f001 fe07 	bl	8001f2c <setRed1>
			setYellow1(OFF);
 800031e:	2000      	movs	r0, #0
 8000320:	f001 fe16 	bl	8001f50 <setYellow1>
			setGreen1(OFF);
 8000324:	2000      	movs	r0, #0
 8000326:	f001 fe25 	bl	8001f74 <setGreen1>

			statusLed1 = AUTO_RED;
 800032a:	4b46      	ldr	r3, [pc, #280]	; (8000444 <fsm_automatic_run1+0x154>)
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
			setTimer(timerForTrafficLight1, timeRedOn);
 8000330:	4b45      	ldr	r3, [pc, #276]	; (8000448 <fsm_automatic_run1+0x158>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	2003      	movs	r0, #3
 8000338:	f001 fce0 	bl	8001cfc <setTimer>

			setCountDown7Seg0(timeRedOn/100);
 800033c:	4b42      	ldr	r3, [pc, #264]	; (8000448 <fsm_automatic_run1+0x158>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a42      	ldr	r2, [pc, #264]	; (800044c <fsm_automatic_run1+0x15c>)
 8000342:	fb82 1203 	smull	r1, r2, r2, r3
 8000346:	1152      	asrs	r2, r2, #5
 8000348:	17db      	asrs	r3, r3, #31
 800034a:	1ad3      	subs	r3, r2, r3
 800034c:	4618      	mov	r0, r3
 800034e:	f001 f943 	bl	80015d8 <setCountDown7Seg0>
			break;
 8000352:	e074      	b.n	800043e <fsm_automatic_run1+0x14e>
		case AUTO_RED:
			setRed1(ON);
 8000354:	2001      	movs	r0, #1
 8000356:	f001 fde9 	bl	8001f2c <setRed1>
			setYellow1(OFF);
 800035a:	2000      	movs	r0, #0
 800035c:	f001 fdf8 	bl	8001f50 <setYellow1>
			setGreen1(OFF);
 8000360:	2000      	movs	r0, #0
 8000362:	f001 fe07 	bl	8001f74 <setGreen1>

			runCountDown7Seg0();
 8000366:	f001 f9bb 	bl	80016e0 <runCountDown7Seg0>

			if(timer_flag[timerForTrafficLight1] == 1){
 800036a:	4b39      	ldr	r3, [pc, #228]	; (8000450 <fsm_automatic_run1+0x160>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d160      	bne.n	8000434 <fsm_automatic_run1+0x144>
				statusLed1 = AUTO_GREEN;
 8000372:	4b34      	ldr	r3, [pc, #208]	; (8000444 <fsm_automatic_run1+0x154>)
 8000374:	2204      	movs	r2, #4
 8000376:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight1, timeGreenOn);
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <fsm_automatic_run1+0x164>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	2003      	movs	r0, #3
 8000380:	f001 fcbc 	bl	8001cfc <setTimer>

				setCountDown7Seg0(timeGreenOn/100);
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <fsm_automatic_run1+0x164>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a30      	ldr	r2, [pc, #192]	; (800044c <fsm_automatic_run1+0x15c>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	1152      	asrs	r2, r2, #5
 8000390:	17db      	asrs	r3, r3, #31
 8000392:	1ad3      	subs	r3, r2, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f001 f91f 	bl	80015d8 <setCountDown7Seg0>
			}
			break;
 800039a:	e04b      	b.n	8000434 <fsm_automatic_run1+0x144>
		case AUTO_YELLOW:
			setRed1(OFF);
 800039c:	2000      	movs	r0, #0
 800039e:	f001 fdc5 	bl	8001f2c <setRed1>
			setYellow1(ON);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f001 fdd4 	bl	8001f50 <setYellow1>
			setGreen1(OFF);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f001 fde3 	bl	8001f74 <setGreen1>

			runCountDown7Seg0();
 80003ae:	f001 f997 	bl	80016e0 <runCountDown7Seg0>

			if(timer_flag[timerForTrafficLight1] == 1){
 80003b2:	4b27      	ldr	r3, [pc, #156]	; (8000450 <fsm_automatic_run1+0x160>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d13e      	bne.n	8000438 <fsm_automatic_run1+0x148>
				statusLed1 = AUTO_RED;
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <fsm_automatic_run1+0x154>)
 80003bc:	2202      	movs	r2, #2
 80003be:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight1, timeRedOn);
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <fsm_automatic_run1+0x158>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	2003      	movs	r0, #3
 80003c8:	f001 fc98 	bl	8001cfc <setTimer>

				setCountDown7Seg0(timeRedOn/100);
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <fsm_automatic_run1+0x158>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1e      	ldr	r2, [pc, #120]	; (800044c <fsm_automatic_run1+0x15c>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	1152      	asrs	r2, r2, #5
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f8fb 	bl	80015d8 <setCountDown7Seg0>
			}
			break;
 80003e2:	e029      	b.n	8000438 <fsm_automatic_run1+0x148>
		case AUTO_GREEN:
			setRed1(OFF);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f001 fda1 	bl	8001f2c <setRed1>
			setYellow1(OFF);
 80003ea:	2000      	movs	r0, #0
 80003ec:	f001 fdb0 	bl	8001f50 <setYellow1>
			setGreen1(ON);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f001 fdbf 	bl	8001f74 <setGreen1>

			runCountDown7Seg0();
 80003f6:	f001 f973 	bl	80016e0 <runCountDown7Seg0>

			if(timer_flag[timerForTrafficLight1] == 1){
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <fsm_automatic_run1+0x160>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d11c      	bne.n	800043c <fsm_automatic_run1+0x14c>
				statusLed1 = AUTO_YELLOW;
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <fsm_automatic_run1+0x154>)
 8000404:	2203      	movs	r2, #3
 8000406:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight1, timeYellowOn);
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <fsm_automatic_run1+0x168>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	2003      	movs	r0, #3
 8000410:	f001 fc74 	bl	8001cfc <setTimer>

				setCountDown7Seg0(timeYellowOn/100);
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <fsm_automatic_run1+0x168>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0c      	ldr	r2, [pc, #48]	; (800044c <fsm_automatic_run1+0x15c>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	1152      	asrs	r2, r2, #5
 8000420:	17db      	asrs	r3, r3, #31
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f001 f8d7 	bl	80015d8 <setCountDown7Seg0>
			}
			break;
 800042a:	e007      	b.n	800043c <fsm_automatic_run1+0x14c>
		default:
			statusLed1 = INIT;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <fsm_automatic_run1+0x154>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
			break;
 8000432:	e004      	b.n	800043e <fsm_automatic_run1+0x14e>
			break;
 8000434:	bf00      	nop
 8000436:	e002      	b.n	800043e <fsm_automatic_run1+0x14e>
			break;
 8000438:	bf00      	nop
 800043a:	e000      	b.n	800043e <fsm_automatic_run1+0x14e>
			break;
 800043c:	bf00      	nop
	}
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000e8 	.word	0x200000e8
 8000448:	20000030 	.word	0x20000030
 800044c:	51eb851f 	.word	0x51eb851f
 8000450:	20000194 	.word	0x20000194
 8000454:	20000038 	.word	0x20000038
 8000458:	20000034 	.word	0x20000034

0800045c <fsm_automatic_run2>:

void fsm_automatic_run2(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	switch(statusLed2){
 8000460:	4b53      	ldr	r3, [pc, #332]	; (80005b0 <fsm_automatic_run2+0x154>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	2b03      	cmp	r3, #3
 8000468:	f200 8096 	bhi.w	8000598 <fsm_automatic_run2+0x13c>
 800046c:	a201      	add	r2, pc, #4	; (adr r2, 8000474 <fsm_automatic_run2+0x18>)
 800046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000472:	bf00      	nop
 8000474:	08000485 	.word	0x08000485
 8000478:	080004c1 	.word	0x080004c1
 800047c:	08000509 	.word	0x08000509
 8000480:	08000551 	.word	0x08000551
		case INIT:
			setRed2(OFF);
 8000484:	2000      	movs	r0, #0
 8000486:	f001 fd87 	bl	8001f98 <setRed2>
			setYellow2(OFF);
 800048a:	2000      	movs	r0, #0
 800048c:	f001 fd96 	bl	8001fbc <setYellow2>
			setGreen2(OFF);
 8000490:	2000      	movs	r0, #0
 8000492:	f001 fda5 	bl	8001fe0 <setGreen2>

			statusLed2 = AUTO_GREEN;
 8000496:	4b46      	ldr	r3, [pc, #280]	; (80005b0 <fsm_automatic_run2+0x154>)
 8000498:	2204      	movs	r2, #4
 800049a:	601a      	str	r2, [r3, #0]
			setTimer(timerForTrafficLight2, timeGreenOn);
 800049c:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <fsm_automatic_run2+0x158>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2004      	movs	r0, #4
 80004a4:	f001 fc2a 	bl	8001cfc <setTimer>

			setCountDown7Seg1(timeGreenOn/100);
 80004a8:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <fsm_automatic_run2+0x158>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a42      	ldr	r2, [pc, #264]	; (80005b8 <fsm_automatic_run2+0x15c>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1152      	asrs	r2, r2, #5
 80004b4:	17db      	asrs	r3, r3, #31
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f8cf 	bl	800165c <setCountDown7Seg1>
			break;
 80004be:	e074      	b.n	80005aa <fsm_automatic_run2+0x14e>
		case AUTO_RED:
			setRed2(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f001 fd69 	bl	8001f98 <setRed2>
			setYellow2(OFF);
 80004c6:	2000      	movs	r0, #0
 80004c8:	f001 fd78 	bl	8001fbc <setYellow2>
			setGreen2(OFF);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f001 fd87 	bl	8001fe0 <setGreen2>

			runCountDown7Seg1();
 80004d2:	f001 f94f 	bl	8001774 <runCountDown7Seg1>

			if(timer_flag[timerForTrafficLight2] == 1){
 80004d6:	4b39      	ldr	r3, [pc, #228]	; (80005bc <fsm_automatic_run2+0x160>)
 80004d8:	691b      	ldr	r3, [r3, #16]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d160      	bne.n	80005a0 <fsm_automatic_run2+0x144>
				statusLed2 = AUTO_GREEN;
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <fsm_automatic_run2+0x154>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight2, timeGreenOn);
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <fsm_automatic_run2+0x158>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2004      	movs	r0, #4
 80004ec:	f001 fc06 	bl	8001cfc <setTimer>

				setCountDown7Seg1(timeGreenOn/100);
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <fsm_automatic_run2+0x158>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <fsm_automatic_run2+0x15c>)
 80004f6:	fb82 1203 	smull	r1, r2, r2, r3
 80004fa:	1152      	asrs	r2, r2, #5
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	4618      	mov	r0, r3
 8000502:	f001 f8ab 	bl	800165c <setCountDown7Seg1>
			}
			break;
 8000506:	e04b      	b.n	80005a0 <fsm_automatic_run2+0x144>
		case AUTO_YELLOW:
			setRed2(OFF);
 8000508:	2000      	movs	r0, #0
 800050a:	f001 fd45 	bl	8001f98 <setRed2>
			setYellow2(ON);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fd54 	bl	8001fbc <setYellow2>
			setGreen2(OFF);
 8000514:	2000      	movs	r0, #0
 8000516:	f001 fd63 	bl	8001fe0 <setGreen2>

			runCountDown7Seg1();
 800051a:	f001 f92b 	bl	8001774 <runCountDown7Seg1>

			if(timer_flag[timerForTrafficLight2] == 1){
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <fsm_automatic_run2+0x160>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d13e      	bne.n	80005a4 <fsm_automatic_run2+0x148>
				statusLed2 = AUTO_RED;
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <fsm_automatic_run2+0x154>)
 8000528:	2202      	movs	r2, #2
 800052a:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight2, timeRedOn);
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <fsm_automatic_run2+0x164>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f001 fbe2 	bl	8001cfc <setTimer>

				setCountDown7Seg1(timeRedOn/100);
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <fsm_automatic_run2+0x164>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <fsm_automatic_run2+0x15c>)
 800053e:	fb82 1203 	smull	r1, r2, r2, r3
 8000542:	1152      	asrs	r2, r2, #5
 8000544:	17db      	asrs	r3, r3, #31
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	4618      	mov	r0, r3
 800054a:	f001 f887 	bl	800165c <setCountDown7Seg1>
			}
			break;
 800054e:	e029      	b.n	80005a4 <fsm_automatic_run2+0x148>
		case AUTO_GREEN:
			setRed2(OFF);
 8000550:	2000      	movs	r0, #0
 8000552:	f001 fd21 	bl	8001f98 <setRed2>
			setYellow2(OFF);
 8000556:	2000      	movs	r0, #0
 8000558:	f001 fd30 	bl	8001fbc <setYellow2>
			setGreen2(ON);
 800055c:	2001      	movs	r0, #1
 800055e:	f001 fd3f 	bl	8001fe0 <setGreen2>

			runCountDown7Seg1();
 8000562:	f001 f907 	bl	8001774 <runCountDown7Seg1>

			if(timer_flag[timerForTrafficLight2] == 1){
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <fsm_automatic_run2+0x160>)
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d11c      	bne.n	80005a8 <fsm_automatic_run2+0x14c>
				statusLed2 = AUTO_YELLOW;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <fsm_automatic_run2+0x154>)
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
				setTimer(timerForTrafficLight2, timeYellowOn);
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <fsm_automatic_run2+0x168>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	2004      	movs	r0, #4
 800057c:	f001 fbbe 	bl	8001cfc <setTimer>

				setCountDown7Seg1(timeYellowOn/100);
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <fsm_automatic_run2+0x168>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <fsm_automatic_run2+0x15c>)
 8000586:	fb82 1203 	smull	r1, r2, r2, r3
 800058a:	1152      	asrs	r2, r2, #5
 800058c:	17db      	asrs	r3, r3, #31
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f863 	bl	800165c <setCountDown7Seg1>
			}
			break;
 8000596:	e007      	b.n	80005a8 <fsm_automatic_run2+0x14c>
		default:
			statusLed2 = INIT;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <fsm_automatic_run2+0x154>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	e004      	b.n	80005aa <fsm_automatic_run2+0x14e>
			break;
 80005a0:	bf00      	nop
 80005a2:	e002      	b.n	80005aa <fsm_automatic_run2+0x14e>
			break;
 80005a4:	bf00      	nop
 80005a6:	e000      	b.n	80005aa <fsm_automatic_run2+0x14e>
			break;
 80005a8:	bf00      	nop
	}
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000ec 	.word	0x200000ec
 80005b4:	20000038 	.word	0x20000038
 80005b8:	51eb851f 	.word	0x51eb851f
 80005bc:	20000194 	.word	0x20000194
 80005c0:	20000030 	.word	0x20000030
 80005c4:	20000034 	.word	0x20000034

080005c8 <fsm_manual_run>:
 *      Author: Acer
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	switch(statusMode){
 80005cc:	4b9d      	ldr	r3, [pc, #628]	; (8000844 <fsm_manual_run+0x27c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b0a      	subs	r3, #10
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	f200 825f 	bhi.w	8000a96 <fsm_manual_run+0x4ce>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <fsm_manual_run+0x18>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	080005f5 	.word	0x080005f5
 80005e4:	0800061f 	.word	0x0800061f
 80005e8:	08000651 	.word	0x08000651
 80005ec:	080007ab 	.word	0x080007ab
 80005f0:	0800093f 	.word	0x0800093f
		case INIT_MODE:
			setTimeRed = timeRedOn;
 80005f4:	4b94      	ldr	r3, [pc, #592]	; (8000848 <fsm_manual_run+0x280>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a94      	ldr	r2, [pc, #592]	; (800084c <fsm_manual_run+0x284>)
 80005fa:	6013      	str	r3, [r2, #0]
			setTimeYellow = timeYellowOn;
 80005fc:	4b94      	ldr	r3, [pc, #592]	; (8000850 <fsm_manual_run+0x288>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a94      	ldr	r2, [pc, #592]	; (8000854 <fsm_manual_run+0x28c>)
 8000602:	6013      	str	r3, [r2, #0]
			setTimeGreen = timeGreenOn;
 8000604:	4b94      	ldr	r3, [pc, #592]	; (8000858 <fsm_manual_run+0x290>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a94      	ldr	r2, [pc, #592]	; (800085c <fsm_manual_run+0x294>)
 800060a:	6013      	str	r3, [r2, #0]
			statusLed1 = INIT;
 800060c:	4b94      	ldr	r3, [pc, #592]	; (8000860 <fsm_manual_run+0x298>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
			statusLed2 = INIT;
 8000612:	4b94      	ldr	r3, [pc, #592]	; (8000864 <fsm_manual_run+0x29c>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
			statusMode = NORMAL_MODE;
 8000618:	4b8a      	ldr	r3, [pc, #552]	; (8000844 <fsm_manual_run+0x27c>)
 800061a:	220b      	movs	r2, #11
 800061c:	601a      	str	r2, [r3, #0]
		case NORMAL_MODE:
			display7Seg2(0);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fc96 	bl	8000f50 <display7Seg2>
			display7Seg3(0);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fdcd 	bl	80011c4 <display7Seg3>
			fsm_automatic_run1();
 800062a:	f7ff fe61 	bl	80002f0 <fsm_automatic_run1>
			fsm_automatic_run2();
 800062e:	f7ff ff15 	bl	800045c <fsm_automatic_run2>
			if(isButtonPressed(0) == 1){
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fdb6 	bl	80001a4 <isButtonPressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	f040 822f 	bne.w	8000a9e <fsm_manual_run+0x4d6>
				statusMode = MAN_RED;
 8000640:	4b80      	ldr	r3, [pc, #512]	; (8000844 <fsm_manual_run+0x27c>)
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
				setTimer(timer250ms, 25);
 8000646:	2119      	movs	r1, #25
 8000648:	2007      	movs	r0, #7
 800064a:	f001 fb57 	bl	8001cfc <setTimer>
			}
			break;
 800064e:	e226      	b.n	8000a9e <fsm_manual_run+0x4d6>
		case MAN_RED:
			display7Seg0(2);
 8000650:	2002      	movs	r0, #2
 8000652:	f000 fa61 	bl	8000b18 <display7Seg0>
			display7Seg1(2);
 8000656:	2002      	movs	r0, #2
 8000658:	f000 fb6c 	bl	8000d34 <display7Seg1>
			display7Seg2((setTimeRed/100)/10);
 800065c:	4b7b      	ldr	r3, [pc, #492]	; (800084c <fsm_manual_run+0x284>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a81      	ldr	r2, [pc, #516]	; (8000868 <fsm_manual_run+0x2a0>)
 8000662:	fb82 1203 	smull	r1, r2, r2, r3
 8000666:	1192      	asrs	r2, r2, #6
 8000668:	17db      	asrs	r3, r3, #31
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fc6f 	bl	8000f50 <display7Seg2>
			display7Seg3((setTimeRed/100)%10);
 8000672:	4b76      	ldr	r3, [pc, #472]	; (800084c <fsm_manual_run+0x284>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a7d      	ldr	r2, [pc, #500]	; (800086c <fsm_manual_run+0x2a4>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1152      	asrs	r2, r2, #5
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <fsm_manual_run+0x2a8>)
 8000684:	fb83 1302 	smull	r1, r3, r3, r2
 8000688:	1099      	asrs	r1, r3, #2
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac9      	subs	r1, r1, r3
 800068e:	460b      	mov	r3, r1
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	1ad1      	subs	r1, r2, r3
 8000698:	4608      	mov	r0, r1
 800069a:	f000 fd93 	bl	80011c4 <display7Seg3>
			if(timer_flag[timer250ms] == 1){
 800069e:	4b75      	ldr	r3, [pc, #468]	; (8000874 <fsm_manual_run+0x2ac>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d13c      	bne.n	8000720 <fsm_manual_run+0x158>
				if(toggle == 0){
 80006a6:	4b74      	ldr	r3, [pc, #464]	; (8000878 <fsm_manual_run+0x2b0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d11c      	bne.n	80006e8 <fsm_manual_run+0x120>
					setRed1(ON);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 fc3c 	bl	8001f2c <setRed1>
					setRed2(ON);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 fc6f 	bl	8001f98 <setRed2>
					setYellow1(OFF);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f001 fc48 	bl	8001f50 <setYellow1>
					setYellow2(OFF);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fc7b 	bl	8001fbc <setYellow2>
					setGreen1(OFF);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f001 fc54 	bl	8001f74 <setGreen1>
					setGreen2(OFF);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 fc87 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 80006d2:	2119      	movs	r1, #25
 80006d4:	2007      	movs	r0, #7
 80006d6:	f001 fb11 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 80006da:	4b67      	ldr	r3, [pc, #412]	; (8000878 <fsm_manual_run+0x2b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f1c3 0301 	rsb	r3, r3, #1
 80006e2:	4a65      	ldr	r2, [pc, #404]	; (8000878 <fsm_manual_run+0x2b0>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e01b      	b.n	8000720 <fsm_manual_run+0x158>
				}
				else{
					setRed1(OFF);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f001 fc1f 	bl	8001f2c <setRed1>
					setRed2(OFF);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f001 fc52 	bl	8001f98 <setRed2>
					setYellow1(OFF);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f001 fc2b 	bl	8001f50 <setYellow1>
					setYellow2(OFF);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 fc5e 	bl	8001fbc <setYellow2>
					setGreen1(OFF);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 fc37 	bl	8001f74 <setGreen1>
					setGreen2(OFF);
 8000706:	2000      	movs	r0, #0
 8000708:	f001 fc6a 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 800070c:	2119      	movs	r1, #25
 800070e:	2007      	movs	r0, #7
 8000710:	f001 faf4 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 8000714:	4b58      	ldr	r3, [pc, #352]	; (8000878 <fsm_manual_run+0x2b0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f1c3 0301 	rsb	r3, r3, #1
 800071c:	4a56      	ldr	r2, [pc, #344]	; (8000878 <fsm_manual_run+0x2b0>)
 800071e:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed(1) == 1){
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd3f 	bl	80001a4 <isButtonPressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d125      	bne.n	8000778 <fsm_manual_run+0x1b0>
				setTimeRed += 100;
 800072c:	4b47      	ldr	r3, [pc, #284]	; (800084c <fsm_manual_run+0x284>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3364      	adds	r3, #100	; 0x64
 8000732:	4a46      	ldr	r2, [pc, #280]	; (800084c <fsm_manual_run+0x284>)
 8000734:	6013      	str	r3, [r2, #0]
				display7Seg2((setTimeRed/100)/10);
 8000736:	4b45      	ldr	r3, [pc, #276]	; (800084c <fsm_manual_run+0x284>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a4b      	ldr	r2, [pc, #300]	; (8000868 <fsm_manual_run+0x2a0>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1192      	asrs	r2, r2, #6
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fc02 	bl	8000f50 <display7Seg2>
				display7Seg3((setTimeRed/100)%10);
 800074c:	4b3f      	ldr	r3, [pc, #252]	; (800084c <fsm_manual_run+0x284>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a46      	ldr	r2, [pc, #280]	; (800086c <fsm_manual_run+0x2a4>)
 8000752:	fb82 1203 	smull	r1, r2, r2, r3
 8000756:	1152      	asrs	r2, r2, #5
 8000758:	17db      	asrs	r3, r3, #31
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	4b44      	ldr	r3, [pc, #272]	; (8000870 <fsm_manual_run+0x2a8>)
 800075e:	fb83 1302 	smull	r1, r3, r3, r2
 8000762:	1099      	asrs	r1, r3, #2
 8000764:	17d3      	asrs	r3, r2, #31
 8000766:	1ac9      	subs	r1, r1, r3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad1      	subs	r1, r2, r3
 8000772:	4608      	mov	r0, r1
 8000774:	f000 fd26 	bl	80011c4 <display7Seg3>
			}
			if(isButtonPressed(2) == 1){
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fd13 	bl	80001a4 <isButtonPressed>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d103      	bne.n	800078c <fsm_manual_run+0x1c4>
				timeRedOn = setTimeRed;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <fsm_manual_run+0x284>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <fsm_manual_run+0x280>)
 800078a:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(0) == 1){
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fd09 	bl	80001a4 <isButtonPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	f040 8184 	bne.w	8000aa2 <fsm_manual_run+0x4da>
				setTimeRed = timeRedOn;
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <fsm_manual_run+0x280>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a2b      	ldr	r2, [pc, #172]	; (800084c <fsm_manual_run+0x284>)
 80007a0:	6013      	str	r3, [r2, #0]
				statusMode = MAN_YELLOW;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <fsm_manual_run+0x27c>)
 80007a4:	220d      	movs	r2, #13
 80007a6:	601a      	str	r2, [r3, #0]
			}
			break;
 80007a8:	e17b      	b.n	8000aa2 <fsm_manual_run+0x4da>
		case MAN_YELLOW:
			display7Seg0(3);
 80007aa:	2003      	movs	r0, #3
 80007ac:	f000 f9b4 	bl	8000b18 <display7Seg0>
			display7Seg1(3);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 fabf 	bl	8000d34 <display7Seg1>
			display7Seg2((setTimeYellow/100)/10);
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <fsm_manual_run+0x28c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <fsm_manual_run+0x2a0>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	1192      	asrs	r2, r2, #6
 80007c2:	17db      	asrs	r3, r3, #31
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbc2 	bl	8000f50 <display7Seg2>
			display7Seg3((setTimeYellow/100)%10);
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <fsm_manual_run+0x28c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <fsm_manual_run+0x2a4>)
 80007d2:	fb82 1203 	smull	r1, r2, r2, r3
 80007d6:	1152      	asrs	r2, r2, #5
 80007d8:	17db      	asrs	r3, r3, #31
 80007da:	1ad2      	subs	r2, r2, r3
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <fsm_manual_run+0x2a8>)
 80007de:	fb83 1302 	smull	r1, r3, r3, r2
 80007e2:	1099      	asrs	r1, r3, #2
 80007e4:	17d3      	asrs	r3, r2, #31
 80007e6:	1ac9      	subs	r1, r1, r3
 80007e8:	460b      	mov	r3, r1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	1ad1      	subs	r1, r2, r3
 80007f2:	4608      	mov	r0, r1
 80007f4:	f000 fce6 	bl	80011c4 <display7Seg3>
			if(timer_flag[timer250ms] == 1){
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <fsm_manual_run+0x2ac>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d159      	bne.n	80008b4 <fsm_manual_run+0x2ec>
				if(toggle == 0){
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <fsm_manual_run+0x2b0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d139      	bne.n	800087c <fsm_manual_run+0x2b4>
					setRed1(OFF);
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fb8f 	bl	8001f2c <setRed1>
					setRed2(OFF);
 800080e:	2000      	movs	r0, #0
 8000810:	f001 fbc2 	bl	8001f98 <setRed2>
					setYellow1(ON);
 8000814:	2001      	movs	r0, #1
 8000816:	f001 fb9b 	bl	8001f50 <setYellow1>
					setYellow2(ON);
 800081a:	2001      	movs	r0, #1
 800081c:	f001 fbce 	bl	8001fbc <setYellow2>
					setGreen1(OFF);
 8000820:	2000      	movs	r0, #0
 8000822:	f001 fba7 	bl	8001f74 <setGreen1>
					setGreen2(OFF);
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fbda 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 800082c:	2119      	movs	r1, #25
 800082e:	2007      	movs	r0, #7
 8000830:	f001 fa64 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <fsm_manual_run+0x2b0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1c3 0301 	rsb	r3, r3, #1
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <fsm_manual_run+0x2b0>)
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	e038      	b.n	80008b4 <fsm_manual_run+0x2ec>
 8000842:	bf00      	nop
 8000844:	200000f0 	.word	0x200000f0
 8000848:	20000030 	.word	0x20000030
 800084c:	2000003c 	.word	0x2000003c
 8000850:	20000034 	.word	0x20000034
 8000854:	20000040 	.word	0x20000040
 8000858:	20000038 	.word	0x20000038
 800085c:	20000044 	.word	0x20000044
 8000860:	200000e8 	.word	0x200000e8
 8000864:	200000ec 	.word	0x200000ec
 8000868:	10624dd3 	.word	0x10624dd3
 800086c:	51eb851f 	.word	0x51eb851f
 8000870:	66666667 	.word	0x66666667
 8000874:	20000194 	.word	0x20000194
 8000878:	200000f4 	.word	0x200000f4
				}
				else{
					setRed1(OFF);
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fb55 	bl	8001f2c <setRed1>
					setRed2(OFF);
 8000882:	2000      	movs	r0, #0
 8000884:	f001 fb88 	bl	8001f98 <setRed2>
					setYellow1(OFF);
 8000888:	2000      	movs	r0, #0
 800088a:	f001 fb61 	bl	8001f50 <setYellow1>
					setYellow2(OFF);
 800088e:	2000      	movs	r0, #0
 8000890:	f001 fb94 	bl	8001fbc <setYellow2>
					setGreen1(OFF);
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fb6d 	bl	8001f74 <setGreen1>
					setGreen2(OFF);
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fba0 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 80008a0:	2119      	movs	r1, #25
 80008a2:	2007      	movs	r0, #7
 80008a4:	f001 fa2a 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 80008a8:	4b81      	ldr	r3, [pc, #516]	; (8000ab0 <fsm_manual_run+0x4e8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1c3 0301 	rsb	r3, r3, #1
 80008b0:	4a7f      	ldr	r2, [pc, #508]	; (8000ab0 <fsm_manual_run+0x4e8>)
 80008b2:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed(1) == 1){
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fc75 	bl	80001a4 <isButtonPressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d125      	bne.n	800090c <fsm_manual_run+0x344>
				setTimeYellow += 100;
 80008c0:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <fsm_manual_run+0x4ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3364      	adds	r3, #100	; 0x64
 80008c6:	4a7b      	ldr	r2, [pc, #492]	; (8000ab4 <fsm_manual_run+0x4ec>)
 80008c8:	6013      	str	r3, [r2, #0]
				display7Seg2((setTimeYellow/100)/10);
 80008ca:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <fsm_manual_run+0x4ec>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a7a      	ldr	r2, [pc, #488]	; (8000ab8 <fsm_manual_run+0x4f0>)
 80008d0:	fb82 1203 	smull	r1, r2, r2, r3
 80008d4:	1192      	asrs	r2, r2, #6
 80008d6:	17db      	asrs	r3, r3, #31
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb38 	bl	8000f50 <display7Seg2>
				display7Seg3((setTimeYellow/100)%10);
 80008e0:	4b74      	ldr	r3, [pc, #464]	; (8000ab4 <fsm_manual_run+0x4ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a75      	ldr	r2, [pc, #468]	; (8000abc <fsm_manual_run+0x4f4>)
 80008e6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ea:	1152      	asrs	r2, r2, #5
 80008ec:	17db      	asrs	r3, r3, #31
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <fsm_manual_run+0x4f8>)
 80008f2:	fb83 1302 	smull	r1, r3, r3, r2
 80008f6:	1099      	asrs	r1, r3, #2
 80008f8:	17d3      	asrs	r3, r2, #31
 80008fa:	1ac9      	subs	r1, r1, r3
 80008fc:	460b      	mov	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	1ad1      	subs	r1, r2, r3
 8000906:	4608      	mov	r0, r1
 8000908:	f000 fc5c 	bl	80011c4 <display7Seg3>
			}
			if(isButtonPressed(2) == 1){
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fc49 	bl	80001a4 <isButtonPressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d103      	bne.n	8000920 <fsm_manual_run+0x358>
				timeYellowOn = setTimeYellow;
 8000918:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <fsm_manual_run+0x4ec>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a69      	ldr	r2, [pc, #420]	; (8000ac4 <fsm_manual_run+0x4fc>)
 800091e:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(0) == 1){
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fc3f 	bl	80001a4 <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80bc 	bne.w	8000aa6 <fsm_manual_run+0x4de>
				setTimeYellow = timeYellowOn;
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <fsm_manual_run+0x4fc>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a60      	ldr	r2, [pc, #384]	; (8000ab4 <fsm_manual_run+0x4ec>)
 8000934:	6013      	str	r3, [r2, #0]
				statusMode = MAN_GREEN;
 8000936:	4b64      	ldr	r3, [pc, #400]	; (8000ac8 <fsm_manual_run+0x500>)
 8000938:	220e      	movs	r2, #14
 800093a:	601a      	str	r2, [r3, #0]
			}
			break;
 800093c:	e0b3      	b.n	8000aa6 <fsm_manual_run+0x4de>
		case MAN_GREEN:
			display7Seg0(4);
 800093e:	2004      	movs	r0, #4
 8000940:	f000 f8ea 	bl	8000b18 <display7Seg0>
			display7Seg1(4);
 8000944:	2004      	movs	r0, #4
 8000946:	f000 f9f5 	bl	8000d34 <display7Seg1>
			display7Seg2((setTimeGreen/100)/10);
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <fsm_manual_run+0x504>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a5a      	ldr	r2, [pc, #360]	; (8000ab8 <fsm_manual_run+0x4f0>)
 8000950:	fb82 1203 	smull	r1, r2, r2, r3
 8000954:	1192      	asrs	r2, r2, #6
 8000956:	17db      	asrs	r3, r3, #31
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 faf8 	bl	8000f50 <display7Seg2>
			display7Seg3((setTimeGreen/100)%10);
 8000960:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <fsm_manual_run+0x504>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a55      	ldr	r2, [pc, #340]	; (8000abc <fsm_manual_run+0x4f4>)
 8000966:	fb82 1203 	smull	r1, r2, r2, r3
 800096a:	1152      	asrs	r2, r2, #5
 800096c:	17db      	asrs	r3, r3, #31
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <fsm_manual_run+0x4f8>)
 8000972:	fb83 1302 	smull	r1, r3, r3, r2
 8000976:	1099      	asrs	r1, r3, #2
 8000978:	17d3      	asrs	r3, r2, #31
 800097a:	1ac9      	subs	r1, r1, r3
 800097c:	460b      	mov	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	1ad1      	subs	r1, r2, r3
 8000986:	4608      	mov	r0, r1
 8000988:	f000 fc1c 	bl	80011c4 <display7Seg3>
			if(timer_flag[timer250ms] == 1){
 800098c:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <fsm_manual_run+0x508>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d13c      	bne.n	8000a0e <fsm_manual_run+0x446>
				if(toggle == 0){
 8000994:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <fsm_manual_run+0x4e8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d11c      	bne.n	80009d6 <fsm_manual_run+0x40e>
					setRed1(OFF);
 800099c:	2000      	movs	r0, #0
 800099e:	f001 fac5 	bl	8001f2c <setRed1>
					setRed2(OFF);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f001 faf8 	bl	8001f98 <setRed2>
					setYellow1(OFF);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fad1 	bl	8001f50 <setYellow1>
					setYellow2(OFF);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f001 fb04 	bl	8001fbc <setYellow2>
					setGreen1(ON);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f001 fadd 	bl	8001f74 <setGreen1>
					setGreen2(ON);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 fb10 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 80009c0:	2119      	movs	r1, #25
 80009c2:	2007      	movs	r0, #7
 80009c4:	f001 f99a 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <fsm_manual_run+0x4e8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f1c3 0301 	rsb	r3, r3, #1
 80009d0:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <fsm_manual_run+0x4e8>)
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e01b      	b.n	8000a0e <fsm_manual_run+0x446>
				}
				else{
					setRed1(OFF);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f001 faa8 	bl	8001f2c <setRed1>
					setRed2(OFF);
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 fadb 	bl	8001f98 <setRed2>
					setYellow1(OFF);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f001 fab4 	bl	8001f50 <setYellow1>
					setYellow2(OFF);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fae7 	bl	8001fbc <setYellow2>
					setGreen1(OFF);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f001 fac0 	bl	8001f74 <setGreen1>
					setGreen2(OFF);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f001 faf3 	bl	8001fe0 <setGreen2>
					setTimer(timer250ms, 25);
 80009fa:	2119      	movs	r1, #25
 80009fc:	2007      	movs	r0, #7
 80009fe:	f001 f97d 	bl	8001cfc <setTimer>
					toggle = 1 - toggle;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <fsm_manual_run+0x4e8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f1c3 0301 	rsb	r3, r3, #1
 8000a0a:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <fsm_manual_run+0x4e8>)
 8000a0c:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButtonPressed(1) == 1){
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fbc8 	bl	80001a4 <isButtonPressed>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d125      	bne.n	8000a66 <fsm_manual_run+0x49e>
				setTimeGreen += 100;
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <fsm_manual_run+0x504>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3364      	adds	r3, #100	; 0x64
 8000a20:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <fsm_manual_run+0x504>)
 8000a22:	6013      	str	r3, [r2, #0]
				display7Seg2((setTimeGreen/100)/10);
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <fsm_manual_run+0x504>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <fsm_manual_run+0x4f0>)
 8000a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2e:	1192      	asrs	r2, r2, #6
 8000a30:	17db      	asrs	r3, r3, #31
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa8b 	bl	8000f50 <display7Seg2>
				display7Seg3((setTimeGreen/100)%10);
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <fsm_manual_run+0x504>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <fsm_manual_run+0x4f4>)
 8000a40:	fb82 1203 	smull	r1, r2, r2, r3
 8000a44:	1152      	asrs	r2, r2, #5
 8000a46:	17db      	asrs	r3, r3, #31
 8000a48:	1ad2      	subs	r2, r2, r3
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <fsm_manual_run+0x4f8>)
 8000a4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a50:	1099      	asrs	r1, r3, #2
 8000a52:	17d3      	asrs	r3, r2, #31
 8000a54:	1ac9      	subs	r1, r1, r3
 8000a56:	460b      	mov	r3, r1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	1ad1      	subs	r1, r2, r3
 8000a60:	4608      	mov	r0, r1
 8000a62:	f000 fbaf 	bl	80011c4 <display7Seg3>
			}
			if(isButtonPressed(2) == 1){
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff fb9c 	bl	80001a4 <isButtonPressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <fsm_manual_run+0x4b2>
				timeGreenOn = setTimeGreen;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <fsm_manual_run+0x504>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <fsm_manual_run+0x50c>)
 8000a78:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(0) == 1){
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fb92 	bl	80001a4 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d111      	bne.n	8000aaa <fsm_manual_run+0x4e2>
				setTimeGreen = timeGreenOn;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <fsm_manual_run+0x50c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <fsm_manual_run+0x504>)
 8000a8c:	6013      	str	r3, [r2, #0]
				statusMode = INIT_MODE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <fsm_manual_run+0x500>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a94:	e009      	b.n	8000aaa <fsm_manual_run+0x4e2>
		default:
			statusMode = INIT_MODE;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <fsm_manual_run+0x500>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	601a      	str	r2, [r3, #0]
			break;
 8000a9c:	e006      	b.n	8000aac <fsm_manual_run+0x4e4>
			break;
 8000a9e:	bf00      	nop
 8000aa0:	e004      	b.n	8000aac <fsm_manual_run+0x4e4>
			break;
 8000aa2:	bf00      	nop
 8000aa4:	e002      	b.n	8000aac <fsm_manual_run+0x4e4>
			break;
 8000aa6:	bf00      	nop
 8000aa8:	e000      	b.n	8000aac <fsm_manual_run+0x4e4>
			break;
 8000aaa:	bf00      	nop
	}
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000f4 	.word	0x200000f4
 8000ab4:	20000040 	.word	0x20000040
 8000ab8:	10624dd3 	.word	0x10624dd3
 8000abc:	51eb851f 	.word	0x51eb851f
 8000ac0:	66666667 	.word	0x66666667
 8000ac4:	20000034 	.word	0x20000034
 8000ac8:	200000f0 	.word	0x200000f0
 8000acc:	20000044 	.word	0x20000044
 8000ad0:	20000194 	.word	0x20000194
 8000ad4:	20000038 	.word	0x20000038

08000ad8 <InitAll>:
 *      Author: Acer
 */

#include "fsm_setting.h"

void InitAll(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	  statusLed1 = INIT;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <InitAll+0x34>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
	  statusLed2 = INIT;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <InitAll+0x38>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
	  statusMode = INIT_MODE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <InitAll+0x3c>)
 8000aea:	220a      	movs	r2, #10
 8000aec:	601a      	str	r2, [r3, #0]
	  setTimer(10, 100);
 8000aee:	2164      	movs	r1, #100	; 0x64
 8000af0:	200a      	movs	r0, #10
 8000af2:	f001 f903 	bl	8001cfc <setTimer>
	  setTimer(timerAnimation1, 37);
 8000af6:	2125      	movs	r1, #37	; 0x25
 8000af8:	2008      	movs	r0, #8
 8000afa:	f001 f8ff 	bl	8001cfc <setTimer>
	  setTimer(timerAnimation2, 27);
 8000afe:	211b      	movs	r1, #27
 8000b00:	2009      	movs	r0, #9
 8000b02:	f001 f8fb 	bl	8001cfc <setTimer>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	200000ec 	.word	0x200000ec
 8000b14:	200000f0 	.word	0x200000f0

08000b18 <display7Seg0>:
 *      Author: Acer
 */

#include "led7_segment.h"

void display7Seg0(int num){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b09      	cmp	r3, #9
 8000b24:	f200 80ea 	bhi.w	8000cfc <display7Seg0+0x1e4>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <display7Seg0+0x18>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b83 	.word	0x08000b83
 8000b38:	08000bad 	.word	0x08000bad
 8000b3c:	08000bd7 	.word	0x08000bd7
 8000b40:	08000c01 	.word	0x08000c01
 8000b44:	08000c2b 	.word	0x08000c2b
 8000b48:	08000c55 	.word	0x08000c55
 8000b4c:	08000c7f 	.word	0x08000c7f
 8000b50:	08000ca9 	.word	0x08000ca9
 8000b54:	08000cd3 	.word	0x08000cd3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4874      	ldr	r0, [pc, #464]	; (8000d30 <display7Seg0+0x218>)
 8000b5e:	f001 fd78 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2102      	movs	r1, #2
 8000b66:	4872      	ldr	r0, [pc, #456]	; (8000d30 <display7Seg0+0x218>)
 8000b68:	f001 fd73 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2104      	movs	r1, #4
 8000b70:	486f      	ldr	r0, [pc, #444]	; (8000d30 <display7Seg0+0x218>)
 8000b72:	f001 fd6e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	486d      	ldr	r0, [pc, #436]	; (8000d30 <display7Seg0+0x218>)
 8000b7c:	f001 fd69 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000b80:	e0d1      	b.n	8000d26 <display7Seg0+0x20e>
		case 1:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2101      	movs	r1, #1
 8000b86:	486a      	ldr	r0, [pc, #424]	; (8000d30 <display7Seg0+0x218>)
 8000b88:	f001 fd63 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4867      	ldr	r0, [pc, #412]	; (8000d30 <display7Seg0+0x218>)
 8000b92:	f001 fd5e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4865      	ldr	r0, [pc, #404]	; (8000d30 <display7Seg0+0x218>)
 8000b9c:	f001 fd59 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	4862      	ldr	r0, [pc, #392]	; (8000d30 <display7Seg0+0x218>)
 8000ba6:	f001 fd54 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000baa:	e0bc      	b.n	8000d26 <display7Seg0+0x20e>
		case 2:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	485f      	ldr	r0, [pc, #380]	; (8000d30 <display7Seg0+0x218>)
 8000bb2:	f001 fd4e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2102      	movs	r1, #2
 8000bba:	485d      	ldr	r0, [pc, #372]	; (8000d30 <display7Seg0+0x218>)
 8000bbc:	f001 fd49 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	485a      	ldr	r0, [pc, #360]	; (8000d30 <display7Seg0+0x218>)
 8000bc6:	f001 fd44 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4858      	ldr	r0, [pc, #352]	; (8000d30 <display7Seg0+0x218>)
 8000bd0:	f001 fd3f 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000bd4:	e0a7      	b.n	8000d26 <display7Seg0+0x20e>
		case 3:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4855      	ldr	r0, [pc, #340]	; (8000d30 <display7Seg0+0x218>)
 8000bdc:	f001 fd39 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2102      	movs	r1, #2
 8000be4:	4852      	ldr	r0, [pc, #328]	; (8000d30 <display7Seg0+0x218>)
 8000be6:	f001 fd34 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2104      	movs	r1, #4
 8000bee:	4850      	ldr	r0, [pc, #320]	; (8000d30 <display7Seg0+0x218>)
 8000bf0:	f001 fd2f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	484d      	ldr	r0, [pc, #308]	; (8000d30 <display7Seg0+0x218>)
 8000bfa:	f001 fd2a 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000bfe:	e092      	b.n	8000d26 <display7Seg0+0x20e>
		case 4:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2101      	movs	r1, #1
 8000c04:	484a      	ldr	r0, [pc, #296]	; (8000d30 <display7Seg0+0x218>)
 8000c06:	f001 fd24 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4848      	ldr	r0, [pc, #288]	; (8000d30 <display7Seg0+0x218>)
 8000c10:	f001 fd1f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2104      	movs	r1, #4
 8000c18:	4845      	ldr	r0, [pc, #276]	; (8000d30 <display7Seg0+0x218>)
 8000c1a:	f001 fd1a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	4843      	ldr	r0, [pc, #268]	; (8000d30 <display7Seg0+0x218>)
 8000c24:	f001 fd15 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000c28:	e07d      	b.n	8000d26 <display7Seg0+0x20e>
		case 5:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4840      	ldr	r0, [pc, #256]	; (8000d30 <display7Seg0+0x218>)
 8000c30:	f001 fd0f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2102      	movs	r1, #2
 8000c38:	483d      	ldr	r0, [pc, #244]	; (8000d30 <display7Seg0+0x218>)
 8000c3a:	f001 fd0a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2104      	movs	r1, #4
 8000c42:	483b      	ldr	r0, [pc, #236]	; (8000d30 <display7Seg0+0x218>)
 8000c44:	f001 fd05 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4838      	ldr	r0, [pc, #224]	; (8000d30 <display7Seg0+0x218>)
 8000c4e:	f001 fd00 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000c52:	e068      	b.n	8000d26 <display7Seg0+0x20e>
		case 6:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <display7Seg0+0x218>)
 8000c5a:	f001 fcfa 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2102      	movs	r1, #2
 8000c62:	4833      	ldr	r0, [pc, #204]	; (8000d30 <display7Seg0+0x218>)
 8000c64:	f001 fcf5 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4830      	ldr	r0, [pc, #192]	; (8000d30 <display7Seg0+0x218>)
 8000c6e:	f001 fcf0 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	482e      	ldr	r0, [pc, #184]	; (8000d30 <display7Seg0+0x218>)
 8000c78:	f001 fceb 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000c7c:	e053      	b.n	8000d26 <display7Seg0+0x20e>
		case 7:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2101      	movs	r1, #1
 8000c82:	482b      	ldr	r0, [pc, #172]	; (8000d30 <display7Seg0+0x218>)
 8000c84:	f001 fce5 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4828      	ldr	r0, [pc, #160]	; (8000d30 <display7Seg0+0x218>)
 8000c8e:	f001 fce0 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2104      	movs	r1, #4
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <display7Seg0+0x218>)
 8000c98:	f001 fcdb 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4823      	ldr	r0, [pc, #140]	; (8000d30 <display7Seg0+0x218>)
 8000ca2:	f001 fcd6 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000ca6:	e03e      	b.n	8000d26 <display7Seg0+0x20e>
		case 8:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	4820      	ldr	r0, [pc, #128]	; (8000d30 <display7Seg0+0x218>)
 8000cae:	f001 fcd0 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <display7Seg0+0x218>)
 8000cb8:	f001 fccb 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	481b      	ldr	r0, [pc, #108]	; (8000d30 <display7Seg0+0x218>)
 8000cc2:	f001 fcc6 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <display7Seg0+0x218>)
 8000ccc:	f001 fcc1 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000cd0:	e029      	b.n	8000d26 <display7Seg0+0x20e>
		case 9:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <display7Seg0+0x218>)
 8000cd8:	f001 fcbb 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <display7Seg0+0x218>)
 8000ce2:	f001 fcb6 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <display7Seg0+0x218>)
 8000cec:	f001 fcb1 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <display7Seg0+0x218>)
 8000cf6:	f001 fcac 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000cfa:	e014      	b.n	8000d26 <display7Seg0+0x20e>
		default:
			HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <display7Seg0+0x218>)
 8000d02:	f001 fca6 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <display7Seg0+0x218>)
 8000d0c:	f001 fca1 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <display7Seg0+0x218>)
 8000d16:	f001 fc9c 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <display7Seg0+0x218>)
 8000d20:	f001 fc97 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000d24:	bf00      	nop
	}
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <display7Seg1>:

void display7Seg1(int num){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b09      	cmp	r3, #9
 8000d40:	f200 80ea 	bhi.w	8000f18 <display7Seg1+0x1e4>
 8000d44:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <display7Seg1+0x18>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d75 	.word	0x08000d75
 8000d50:	08000d9f 	.word	0x08000d9f
 8000d54:	08000dc9 	.word	0x08000dc9
 8000d58:	08000df3 	.word	0x08000df3
 8000d5c:	08000e1d 	.word	0x08000e1d
 8000d60:	08000e47 	.word	0x08000e47
 8000d64:	08000e71 	.word	0x08000e71
 8000d68:	08000e9b 	.word	0x08000e9b
 8000d6c:	08000ec5 	.word	0x08000ec5
 8000d70:	08000eef 	.word	0x08000eef
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2110      	movs	r1, #16
 8000d78:	4874      	ldr	r0, [pc, #464]	; (8000f4c <display7Seg1+0x218>)
 8000d7a:	f001 fc6a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2120      	movs	r1, #32
 8000d82:	4872      	ldr	r0, [pc, #456]	; (8000f4c <display7Seg1+0x218>)
 8000d84:	f001 fc65 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	486f      	ldr	r0, [pc, #444]	; (8000f4c <display7Seg1+0x218>)
 8000d8e:	f001 fc60 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	486d      	ldr	r0, [pc, #436]	; (8000f4c <display7Seg1+0x218>)
 8000d98:	f001 fc5b 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000d9c:	e0d1      	b.n	8000f42 <display7Seg1+0x20e>
		case 1:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	486a      	ldr	r0, [pc, #424]	; (8000f4c <display7Seg1+0x218>)
 8000da4:	f001 fc55 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2120      	movs	r1, #32
 8000dac:	4867      	ldr	r0, [pc, #412]	; (8000f4c <display7Seg1+0x218>)
 8000dae:	f001 fc50 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4865      	ldr	r0, [pc, #404]	; (8000f4c <display7Seg1+0x218>)
 8000db8:	f001 fc4b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	4862      	ldr	r0, [pc, #392]	; (8000f4c <display7Seg1+0x218>)
 8000dc2:	f001 fc46 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000dc6:	e0bc      	b.n	8000f42 <display7Seg1+0x20e>
		case 2:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2110      	movs	r1, #16
 8000dcc:	485f      	ldr	r0, [pc, #380]	; (8000f4c <display7Seg1+0x218>)
 8000dce:	f001 fc40 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	485d      	ldr	r0, [pc, #372]	; (8000f4c <display7Seg1+0x218>)
 8000dd8:	f001 fc3b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	485a      	ldr	r0, [pc, #360]	; (8000f4c <display7Seg1+0x218>)
 8000de2:	f001 fc36 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4858      	ldr	r0, [pc, #352]	; (8000f4c <display7Seg1+0x218>)
 8000dec:	f001 fc31 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000df0:	e0a7      	b.n	8000f42 <display7Seg1+0x20e>
		case 3:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2110      	movs	r1, #16
 8000df6:	4855      	ldr	r0, [pc, #340]	; (8000f4c <display7Seg1+0x218>)
 8000df8:	f001 fc2b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2120      	movs	r1, #32
 8000e00:	4852      	ldr	r0, [pc, #328]	; (8000f4c <display7Seg1+0x218>)
 8000e02:	f001 fc26 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4850      	ldr	r0, [pc, #320]	; (8000f4c <display7Seg1+0x218>)
 8000e0c:	f001 fc21 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	484d      	ldr	r0, [pc, #308]	; (8000f4c <display7Seg1+0x218>)
 8000e16:	f001 fc1c 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000e1a:	e092      	b.n	8000f42 <display7Seg1+0x20e>
		case 4:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	484a      	ldr	r0, [pc, #296]	; (8000f4c <display7Seg1+0x218>)
 8000e22:	f001 fc16 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4848      	ldr	r0, [pc, #288]	; (8000f4c <display7Seg1+0x218>)
 8000e2c:	f001 fc11 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	4845      	ldr	r0, [pc, #276]	; (8000f4c <display7Seg1+0x218>)
 8000e36:	f001 fc0c 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	4843      	ldr	r0, [pc, #268]	; (8000f4c <display7Seg1+0x218>)
 8000e40:	f001 fc07 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000e44:	e07d      	b.n	8000f42 <display7Seg1+0x20e>
		case 5:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4840      	ldr	r0, [pc, #256]	; (8000f4c <display7Seg1+0x218>)
 8000e4c:	f001 fc01 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	483d      	ldr	r0, [pc, #244]	; (8000f4c <display7Seg1+0x218>)
 8000e56:	f001 fbfc 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	483b      	ldr	r0, [pc, #236]	; (8000f4c <display7Seg1+0x218>)
 8000e60:	f001 fbf7 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	4838      	ldr	r0, [pc, #224]	; (8000f4c <display7Seg1+0x218>)
 8000e6a:	f001 fbf2 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000e6e:	e068      	b.n	8000f42 <display7Seg1+0x20e>
		case 6:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	4835      	ldr	r0, [pc, #212]	; (8000f4c <display7Seg1+0x218>)
 8000e76:	f001 fbec 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4833      	ldr	r0, [pc, #204]	; (8000f4c <display7Seg1+0x218>)
 8000e80:	f001 fbe7 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4830      	ldr	r0, [pc, #192]	; (8000f4c <display7Seg1+0x218>)
 8000e8a:	f001 fbe2 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	482e      	ldr	r0, [pc, #184]	; (8000f4c <display7Seg1+0x218>)
 8000e94:	f001 fbdd 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000e98:	e053      	b.n	8000f42 <display7Seg1+0x20e>
		case 7:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <display7Seg1+0x218>)
 8000ea0:	f001 fbd7 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	4828      	ldr	r0, [pc, #160]	; (8000f4c <display7Seg1+0x218>)
 8000eaa:	f001 fbd2 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	4826      	ldr	r0, [pc, #152]	; (8000f4c <display7Seg1+0x218>)
 8000eb4:	f001 fbcd 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	4823      	ldr	r0, [pc, #140]	; (8000f4c <display7Seg1+0x218>)
 8000ebe:	f001 fbc8 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000ec2:	e03e      	b.n	8000f42 <display7Seg1+0x20e>
		case 8:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4820      	ldr	r0, [pc, #128]	; (8000f4c <display7Seg1+0x218>)
 8000eca:	f001 fbc2 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <display7Seg1+0x218>)
 8000ed4:	f001 fbbd 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	481b      	ldr	r0, [pc, #108]	; (8000f4c <display7Seg1+0x218>)
 8000ede:	f001 fbb8 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <display7Seg1+0x218>)
 8000ee8:	f001 fbb3 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000eec:	e029      	b.n	8000f42 <display7Seg1+0x20e>
		case 9:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <display7Seg1+0x218>)
 8000ef4:	f001 fbad 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <display7Seg1+0x218>)
 8000efe:	f001 fba8 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <display7Seg1+0x218>)
 8000f08:	f001 fba3 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	480e      	ldr	r0, [pc, #56]	; (8000f4c <display7Seg1+0x218>)
 8000f12:	f001 fb9e 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000f16:	e014      	b.n	8000f42 <display7Seg1+0x20e>
		default:
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <display7Seg1+0x218>)
 8000f1e:	f001 fb98 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2120      	movs	r1, #32
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <display7Seg1+0x218>)
 8000f28:	f001 fb93 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <display7Seg1+0x218>)
 8000f32:	f001 fb8e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <display7Seg1+0x218>)
 8000f3c:	f001 fb89 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000f40:	bf00      	nop
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <display7Seg2>:

void display7Seg2(int num){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	f200 8112 	bhi.w	8001184 <display7Seg2+0x234>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <display7Seg2+0x18>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	08000fc3 	.word	0x08000fc3
 8000f70:	08000ff5 	.word	0x08000ff5
 8000f74:	08001027 	.word	0x08001027
 8000f78:	08001059 	.word	0x08001059
 8000f7c:	0800108b 	.word	0x0800108b
 8000f80:	080010bd 	.word	0x080010bd
 8000f84:	080010ef 	.word	0x080010ef
 8000f88:	08001121 	.word	0x08001121
 8000f8c:	08001153 	.word	0x08001153
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	488a      	ldr	r0, [pc, #552]	; (80011c0 <display7Seg2+0x270>)
 8000f98:	f001 fb5b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4887      	ldr	r0, [pc, #540]	; (80011c0 <display7Seg2+0x270>)
 8000fa4:	f001 fb55 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4884      	ldr	r0, [pc, #528]	; (80011c0 <display7Seg2+0x270>)
 8000fb0:	f001 fb4f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fba:	4881      	ldr	r0, [pc, #516]	; (80011c0 <display7Seg2+0x270>)
 8000fbc:	f001 fb49 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000fc0:	e0f9      	b.n	80011b6 <display7Seg2+0x266>
		case 1:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	487d      	ldr	r0, [pc, #500]	; (80011c0 <display7Seg2+0x270>)
 8000fca:	f001 fb42 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	487a      	ldr	r0, [pc, #488]	; (80011c0 <display7Seg2+0x270>)
 8000fd6:	f001 fb3c 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe0:	4877      	ldr	r0, [pc, #476]	; (80011c0 <display7Seg2+0x270>)
 8000fe2:	f001 fb36 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fec:	4874      	ldr	r0, [pc, #464]	; (80011c0 <display7Seg2+0x270>)
 8000fee:	f001 fb30 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8000ff2:	e0e0      	b.n	80011b6 <display7Seg2+0x266>
		case 2:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	4871      	ldr	r0, [pc, #452]	; (80011c0 <display7Seg2+0x270>)
 8000ffc:	f001 fb29 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001006:	486e      	ldr	r0, [pc, #440]	; (80011c0 <display7Seg2+0x270>)
 8001008:	f001 fb23 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	486b      	ldr	r0, [pc, #428]	; (80011c0 <display7Seg2+0x270>)
 8001014:	f001 fb1d 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101e:	4868      	ldr	r0, [pc, #416]	; (80011c0 <display7Seg2+0x270>)
 8001020:	f001 fb17 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001024:	e0c7      	b.n	80011b6 <display7Seg2+0x266>
		case 3:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4864      	ldr	r0, [pc, #400]	; (80011c0 <display7Seg2+0x270>)
 800102e:	f001 fb10 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	4861      	ldr	r0, [pc, #388]	; (80011c0 <display7Seg2+0x270>)
 800103a:	f001 fb0a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	485e      	ldr	r0, [pc, #376]	; (80011c0 <display7Seg2+0x270>)
 8001046:	f001 fb04 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001050:	485b      	ldr	r0, [pc, #364]	; (80011c0 <display7Seg2+0x270>)
 8001052:	f001 fafe 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001056:	e0ae      	b.n	80011b6 <display7Seg2+0x266>
		case 4:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	4858      	ldr	r0, [pc, #352]	; (80011c0 <display7Seg2+0x270>)
 8001060:	f001 faf7 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4855      	ldr	r0, [pc, #340]	; (80011c0 <display7Seg2+0x270>)
 800106c:	f001 faf1 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4852      	ldr	r0, [pc, #328]	; (80011c0 <display7Seg2+0x270>)
 8001078:	f001 faeb 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	484f      	ldr	r0, [pc, #316]	; (80011c0 <display7Seg2+0x270>)
 8001084:	f001 fae5 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001088:	e095      	b.n	80011b6 <display7Seg2+0x266>
		case 5:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	484b      	ldr	r0, [pc, #300]	; (80011c0 <display7Seg2+0x270>)
 8001092:	f001 fade 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	4848      	ldr	r0, [pc, #288]	; (80011c0 <display7Seg2+0x270>)
 800109e:	f001 fad8 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	4845      	ldr	r0, [pc, #276]	; (80011c0 <display7Seg2+0x270>)
 80010aa:	f001 fad2 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	4842      	ldr	r0, [pc, #264]	; (80011c0 <display7Seg2+0x270>)
 80010b6:	f001 facc 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80010ba:	e07c      	b.n	80011b6 <display7Seg2+0x266>
		case 6:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	483f      	ldr	r0, [pc, #252]	; (80011c0 <display7Seg2+0x270>)
 80010c4:	f001 fac5 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ce:	483c      	ldr	r0, [pc, #240]	; (80011c0 <display7Seg2+0x270>)
 80010d0:	f001 fabf 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4839      	ldr	r0, [pc, #228]	; (80011c0 <display7Seg2+0x270>)
 80010dc:	f001 fab9 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e6:	4836      	ldr	r0, [pc, #216]	; (80011c0 <display7Seg2+0x270>)
 80010e8:	f001 fab3 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80010ec:	e063      	b.n	80011b6 <display7Seg2+0x266>
		case 7:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4832      	ldr	r0, [pc, #200]	; (80011c0 <display7Seg2+0x270>)
 80010f6:	f001 faac 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001100:	482f      	ldr	r0, [pc, #188]	; (80011c0 <display7Seg2+0x270>)
 8001102:	f001 faa6 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	482c      	ldr	r0, [pc, #176]	; (80011c0 <display7Seg2+0x270>)
 800110e:	f001 faa0 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	4829      	ldr	r0, [pc, #164]	; (80011c0 <display7Seg2+0x270>)
 800111a:	f001 fa9a 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 800111e:	e04a      	b.n	80011b6 <display7Seg2+0x266>
		case 8:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	4826      	ldr	r0, [pc, #152]	; (80011c0 <display7Seg2+0x270>)
 8001128:	f001 fa93 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <display7Seg2+0x270>)
 8001134:	f001 fa8d 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <display7Seg2+0x270>)
 8001140:	f001 fa87 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	481d      	ldr	r0, [pc, #116]	; (80011c0 <display7Seg2+0x270>)
 800114c:	f001 fa81 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001150:	e031      	b.n	80011b6 <display7Seg2+0x266>
		case 9:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	4819      	ldr	r0, [pc, #100]	; (80011c0 <display7Seg2+0x270>)
 800115a:	f001 fa7a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	4816      	ldr	r0, [pc, #88]	; (80011c0 <display7Seg2+0x270>)
 8001166:	f001 fa74 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <display7Seg2+0x270>)
 8001172:	f001 fa6e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <display7Seg2+0x270>)
 800117e:	f001 fa68 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001182:	e018      	b.n	80011b6 <display7Seg2+0x266>
		default:
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <display7Seg2+0x270>)
 800118c:	f001 fa61 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <display7Seg2+0x270>)
 8001198:	f001 fa5b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <display7Seg2+0x270>)
 80011a4:	f001 fa55 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <display7Seg2+0x270>)
 80011b0:	f001 fa4f 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80011b4:	bf00      	nop
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <display7Seg3>:

void display7Seg3(int num){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	f200 8112 	bhi.w	80013f8 <display7Seg3+0x234>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <display7Seg3+0x18>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	08001205 	.word	0x08001205
 80011e0:	08001237 	.word	0x08001237
 80011e4:	08001269 	.word	0x08001269
 80011e8:	0800129b 	.word	0x0800129b
 80011ec:	080012cd 	.word	0x080012cd
 80011f0:	080012ff 	.word	0x080012ff
 80011f4:	08001331 	.word	0x08001331
 80011f8:	08001363 	.word	0x08001363
 80011fc:	08001395 	.word	0x08001395
 8001200:	080013c7 	.word	0x080013c7
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120a:	488a      	ldr	r0, [pc, #552]	; (8001434 <display7Seg3+0x270>)
 800120c:	f001 fa21 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4887      	ldr	r0, [pc, #540]	; (8001434 <display7Seg3+0x270>)
 8001218:	f001 fa1b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	4884      	ldr	r0, [pc, #528]	; (8001434 <display7Seg3+0x270>)
 8001224:	f001 fa15 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122e:	4881      	ldr	r0, [pc, #516]	; (8001434 <display7Seg3+0x270>)
 8001230:	f001 fa0f 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001234:	e0f9      	b.n	800142a <display7Seg3+0x266>
		case 1:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	487d      	ldr	r0, [pc, #500]	; (8001434 <display7Seg3+0x270>)
 800123e:	f001 fa08 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001248:	487a      	ldr	r0, [pc, #488]	; (8001434 <display7Seg3+0x270>)
 800124a:	f001 fa02 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	4877      	ldr	r0, [pc, #476]	; (8001434 <display7Seg3+0x270>)
 8001256:	f001 f9fc 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001260:	4874      	ldr	r0, [pc, #464]	; (8001434 <display7Seg3+0x270>)
 8001262:	f001 f9f6 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001266:	e0e0      	b.n	800142a <display7Seg3+0x266>
		case 2:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4871      	ldr	r0, [pc, #452]	; (8001434 <display7Seg3+0x270>)
 8001270:	f001 f9ef 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	486e      	ldr	r0, [pc, #440]	; (8001434 <display7Seg3+0x270>)
 800127c:	f001 f9e9 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001286:	486b      	ldr	r0, [pc, #428]	; (8001434 <display7Seg3+0x270>)
 8001288:	f001 f9e3 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	4868      	ldr	r0, [pc, #416]	; (8001434 <display7Seg3+0x270>)
 8001294:	f001 f9dd 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001298:	e0c7      	b.n	800142a <display7Seg3+0x266>
		case 3:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	4864      	ldr	r0, [pc, #400]	; (8001434 <display7Seg3+0x270>)
 80012a2:	f001 f9d6 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ac:	4861      	ldr	r0, [pc, #388]	; (8001434 <display7Seg3+0x270>)
 80012ae:	f001 f9d0 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b8:	485e      	ldr	r0, [pc, #376]	; (8001434 <display7Seg3+0x270>)
 80012ba:	f001 f9ca 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	485b      	ldr	r0, [pc, #364]	; (8001434 <display7Seg3+0x270>)
 80012c6:	f001 f9c4 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80012ca:	e0ae      	b.n	800142a <display7Seg3+0x266>
		case 4:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4858      	ldr	r0, [pc, #352]	; (8001434 <display7Seg3+0x270>)
 80012d4:	f001 f9bd 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4855      	ldr	r0, [pc, #340]	; (8001434 <display7Seg3+0x270>)
 80012e0:	f001 f9b7 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ea:	4852      	ldr	r0, [pc, #328]	; (8001434 <display7Seg3+0x270>)
 80012ec:	f001 f9b1 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	484f      	ldr	r0, [pc, #316]	; (8001434 <display7Seg3+0x270>)
 80012f8:	f001 f9ab 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80012fc:	e095      	b.n	800142a <display7Seg3+0x266>
		case 5:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001304:	484b      	ldr	r0, [pc, #300]	; (8001434 <display7Seg3+0x270>)
 8001306:	f001 f9a4 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	4848      	ldr	r0, [pc, #288]	; (8001434 <display7Seg3+0x270>)
 8001312:	f001 f99e 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <display7Seg3+0x270>)
 800131e:	f001 f998 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001328:	4842      	ldr	r0, [pc, #264]	; (8001434 <display7Seg3+0x270>)
 800132a:	f001 f992 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 800132e:	e07c      	b.n	800142a <display7Seg3+0x266>
		case 6:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001336:	483f      	ldr	r0, [pc, #252]	; (8001434 <display7Seg3+0x270>)
 8001338:	f001 f98b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001342:	483c      	ldr	r0, [pc, #240]	; (8001434 <display7Seg3+0x270>)
 8001344:	f001 f985 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134e:	4839      	ldr	r0, [pc, #228]	; (8001434 <display7Seg3+0x270>)
 8001350:	f001 f97f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135a:	4836      	ldr	r0, [pc, #216]	; (8001434 <display7Seg3+0x270>)
 800135c:	f001 f979 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001360:	e063      	b.n	800142a <display7Seg3+0x266>
		case 7:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001368:	4832      	ldr	r0, [pc, #200]	; (8001434 <display7Seg3+0x270>)
 800136a:	f001 f972 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001374:	482f      	ldr	r0, [pc, #188]	; (8001434 <display7Seg3+0x270>)
 8001376:	f001 f96c 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001380:	482c      	ldr	r0, [pc, #176]	; (8001434 <display7Seg3+0x270>)
 8001382:	f001 f966 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <display7Seg3+0x270>)
 800138e:	f001 f960 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001392:	e04a      	b.n	800142a <display7Seg3+0x266>
		case 8:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <display7Seg3+0x270>)
 800139c:	f001 f959 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a6:	4823      	ldr	r0, [pc, #140]	; (8001434 <display7Seg3+0x270>)
 80013a8:	f001 f953 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <display7Seg3+0x270>)
 80013b4:	f001 f94d 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	481d      	ldr	r0, [pc, #116]	; (8001434 <display7Seg3+0x270>)
 80013c0:	f001 f947 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80013c4:	e031      	b.n	800142a <display7Seg3+0x266>
		case 9:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013cc:	4819      	ldr	r0, [pc, #100]	; (8001434 <display7Seg3+0x270>)
 80013ce:	f001 f940 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d8:	4816      	ldr	r0, [pc, #88]	; (8001434 <display7Seg3+0x270>)
 80013da:	f001 f93a 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e4:	4813      	ldr	r0, [pc, #76]	; (8001434 <display7Seg3+0x270>)
 80013e6:	f001 f934 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <display7Seg3+0x270>)
 80013f2:	f001 f92e 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 80013f6:	e018      	b.n	800142a <display7Seg3+0x266>
		default:
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <display7Seg3+0x270>)
 8001400:	f001 f927 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <display7Seg3+0x270>)
 800140c:	f001 f921 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <display7Seg3+0x270>)
 8001418:	f001 f91b 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <display7Seg3+0x270>)
 8001424:	f001 f915 	bl	8002652 <HAL_GPIO_WritePin>
			break;
 8001428:	bf00      	nop
	}
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40010c00 	.word	0x40010c00

08001438 <animation1>:


void animation1(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	if(timer_flag[timerAnimation1] == 1){
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <animation1+0xb8>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d153      	bne.n	80014ec <animation1+0xb4>
		if(EN0 == 1){
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <animation1+0xbc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d128      	bne.n	800149e <animation1+0x66>
			EN0 = 0;
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <animation1+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
			EN1 = 1;
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <animation1+0xc0>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <animation1+0xbc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <animation1+0xc4>)
 8001466:	f001 f8f4 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <animation1+0xc0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <animation1+0xc4>)
 8001478:	f001 f8eb 	bl	8002652 <HAL_GPIO_WritePin>
			display7Seg0(countDown1%10);
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <animation1+0xc8>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <animation1+0xcc>)
 8001482:	fb83 1302 	smull	r1, r3, r3, r2
 8001486:	1099      	asrs	r1, r3, #2
 8001488:	17d3      	asrs	r3, r2, #31
 800148a:	1ac9      	subs	r1, r1, r3
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	1ad1      	subs	r1, r2, r3
 8001496:	4608      	mov	r0, r1
 8001498:	f7ff fb3e 	bl	8000b18 <display7Seg0>
 800149c:	e022      	b.n	80014e4 <animation1+0xac>
		}
		else{
			EN0 = 1;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <animation1+0xbc>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
			EN1 = 0;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <animation1+0xc0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <animation1+0xbc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <animation1+0xc4>)
 80014b8:	f001 f8cb 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <animation1+0xc0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <animation1+0xc4>)
 80014ca:	f001 f8c2 	bl	8002652 <HAL_GPIO_WritePin>
			display7Seg0(countDown1/10);
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <animation1+0xc8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <animation1+0xcc>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1092      	asrs	r2, r2, #2
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb1a 	bl	8000b18 <display7Seg0>
		}
		setTimer(timerAnimation1, 10);
 80014e4:	210a      	movs	r1, #10
 80014e6:	2008      	movs	r0, #8
 80014e8:	f000 fc08 	bl	8001cfc <setTimer>
	}
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000194 	.word	0x20000194
 80014f4:	20000100 	.word	0x20000100
 80014f8:	20000048 	.word	0x20000048
 80014fc:	40010800 	.word	0x40010800
 8001500:	200000f8 	.word	0x200000f8
 8001504:	66666667 	.word	0x66666667

08001508 <animation2>:

void animation2(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	if(timer_flag[timerAnimation2] == 1){
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <animation2+0xb8>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2b01      	cmp	r3, #1
 8001512:	d153      	bne.n	80015bc <animation2+0xb4>
		if(EN2 == 1){
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <animation2+0xbc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d128      	bne.n	800156e <animation2+0x66>
			EN2 = 0;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <animation2+0xbc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
			EN3 = 1;
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <animation2+0xc0>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <animation2+0xbc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4825      	ldr	r0, [pc, #148]	; (80015cc <animation2+0xc4>)
 8001536:	f001 f88c 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <animation2+0xc0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <animation2+0xc4>)
 8001548:	f001 f883 	bl	8002652 <HAL_GPIO_WritePin>
			display7Seg1(countDown2%10);
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <animation2+0xc8>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <animation2+0xcc>)
 8001552:	fb83 1302 	smull	r1, r3, r3, r2
 8001556:	1099      	asrs	r1, r3, #2
 8001558:	17d3      	asrs	r3, r2, #31
 800155a:	1ac9      	subs	r1, r1, r3
 800155c:	460b      	mov	r3, r1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	1ad1      	subs	r1, r2, r3
 8001566:	4608      	mov	r0, r1
 8001568:	f7ff fbe4 	bl	8000d34 <display7Seg1>
 800156c:	e022      	b.n	80015b4 <animation2+0xac>
		}
		else{
			EN2 = 1;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <animation2+0xbc>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
			EN3 = 0;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <animation2+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <animation2+0xbc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <animation2+0xc4>)
 8001588:	f001 f863 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <animation2+0xc0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <animation2+0xc4>)
 800159a:	f001 f85a 	bl	8002652 <HAL_GPIO_WritePin>
			display7Seg1(countDown2/10);
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <animation2+0xc8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <animation2+0xcc>)
 80015a4:	fb82 1203 	smull	r1, r2, r2, r3
 80015a8:	1092      	asrs	r2, r2, #2
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbc0 	bl	8000d34 <display7Seg1>
		}
		setTimer(timerAnimation2, 10);
 80015b4:	210a      	movs	r1, #10
 80015b6:	2009      	movs	r0, #9
 80015b8:	f000 fba0 	bl	8001cfc <setTimer>
	}
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000194 	.word	0x20000194
 80015c4:	20000104 	.word	0x20000104
 80015c8:	2000004c 	.word	0x2000004c
 80015cc:	40010800 	.word	0x40010800
 80015d0:	200000fc 	.word	0x200000fc
 80015d4:	66666667 	.word	0x66666667

080015d8 <setCountDown7Seg0>:

void setCountDown7Seg0(int num){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	countDown1 = num;
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <setCountDown7Seg0+0x70>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
	EN0 = 0;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <setCountDown7Seg0+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
	EN1 = 1;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <setCountDown7Seg0+0x78>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <setCountDown7Seg0+0x74>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <setCountDown7Seg0+0x7c>)
 8001600:	f001 f827 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <setCountDown7Seg0+0x78>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <setCountDown7Seg0+0x7c>)
 8001612:	f001 f81e 	bl	8002652 <HAL_GPIO_WritePin>
	display7Seg0(countDown1%10);
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <setCountDown7Seg0+0x70>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <setCountDown7Seg0+0x80>)
 800161c:	fb83 1302 	smull	r1, r3, r3, r2
 8001620:	1099      	asrs	r1, r3, #2
 8001622:	17d3      	asrs	r3, r2, #31
 8001624:	1ac9      	subs	r1, r1, r3
 8001626:	460b      	mov	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	1ad1      	subs	r1, r2, r3
 8001630:	4608      	mov	r0, r1
 8001632:	f7ff fa71 	bl	8000b18 <display7Seg0>
	setTimer(timer1Sec1, 100);
 8001636:	2164      	movs	r1, #100	; 0x64
 8001638:	2005      	movs	r0, #5
 800163a:	f000 fb5f 	bl	8001cfc <setTimer>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000f8 	.word	0x200000f8
 800164c:	20000100 	.word	0x20000100
 8001650:	20000048 	.word	0x20000048
 8001654:	40010800 	.word	0x40010800
 8001658:	66666667 	.word	0x66666667

0800165c <setCountDown7Seg1>:

void setCountDown7Seg1(int num){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	countDown2 = num;
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <setCountDown7Seg1+0x70>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
	EN2 = 0;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <setCountDown7Seg1+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
	EN3 = 1;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <setCountDown7Seg1+0x78>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <setCountDown7Seg1+0x74>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <setCountDown7Seg1+0x7c>)
 8001684:	f000 ffe5 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <setCountDown7Seg1+0x78>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <setCountDown7Seg1+0x7c>)
 8001696:	f000 ffdc 	bl	8002652 <HAL_GPIO_WritePin>
	display7Seg1(countDown2%10);
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <setCountDown7Seg1+0x70>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <setCountDown7Seg1+0x80>)
 80016a0:	fb83 1302 	smull	r1, r3, r3, r2
 80016a4:	1099      	asrs	r1, r3, #2
 80016a6:	17d3      	asrs	r3, r2, #31
 80016a8:	1ac9      	subs	r1, r1, r3
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	1ad1      	subs	r1, r2, r3
 80016b4:	4608      	mov	r0, r1
 80016b6:	f7ff fb3d 	bl	8000d34 <display7Seg1>
	setTimer(timer1Sec2, 100);
 80016ba:	2164      	movs	r1, #100	; 0x64
 80016bc:	2006      	movs	r0, #6
 80016be:	f000 fb1d 	bl	8001cfc <setTimer>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000fc 	.word	0x200000fc
 80016d0:	20000104 	.word	0x20000104
 80016d4:	2000004c 	.word	0x2000004c
 80016d8:	40010800 	.word	0x40010800
 80016dc:	66666667 	.word	0x66666667

080016e0 <runCountDown7Seg0>:

void runCountDown7Seg0(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	animation1();
 80016e4:	f7ff fea8 	bl	8001438 <animation1>
	if(timer_flag[timer1Sec1] == 1){
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <runCountDown7Seg0+0x7c>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d133      	bne.n	8001758 <runCountDown7Seg0+0x78>
		countDown1--;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <runCountDown7Seg0+0x80>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <runCountDown7Seg0+0x80>)
 80016f8:	6013      	str	r3, [r2, #0]
		setTimer(timer1Sec1, 100);
 80016fa:	2164      	movs	r1, #100	; 0x64
 80016fc:	2005      	movs	r0, #5
 80016fe:	f000 fafd 	bl	8001cfc <setTimer>
		EN0 = 0;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <runCountDown7Seg0+0x84>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
		EN1 = 1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <runCountDown7Seg0+0x88>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <runCountDown7Seg0+0x84>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <runCountDown7Seg0+0x8c>)
 800171c:	f000 ff99 	bl	8002652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <runCountDown7Seg0+0x88>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <runCountDown7Seg0+0x8c>)
 800172e:	f000 ff90 	bl	8002652 <HAL_GPIO_WritePin>
		display7Seg0(countDown1%10);
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <runCountDown7Seg0+0x80>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <runCountDown7Seg0+0x90>)
 8001738:	fb83 1302 	smull	r1, r3, r3, r2
 800173c:	1099      	asrs	r1, r3, #2
 800173e:	17d3      	asrs	r3, r2, #31
 8001740:	1ac9      	subs	r1, r1, r3
 8001742:	460b      	mov	r3, r1
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	1ad1      	subs	r1, r2, r3
 800174c:	4608      	mov	r0, r1
 800174e:	f7ff f9e3 	bl	8000b18 <display7Seg0>
		EN0 = 0;
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <runCountDown7Seg0+0x84>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	}
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000194 	.word	0x20000194
 8001760:	200000f8 	.word	0x200000f8
 8001764:	20000100 	.word	0x20000100
 8001768:	20000048 	.word	0x20000048
 800176c:	40010800 	.word	0x40010800
 8001770:	66666667 	.word	0x66666667

08001774 <runCountDown7Seg1>:
void runCountDown7Seg1(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	animation2();
 8001778:	f7ff fec6 	bl	8001508 <animation2>
	if(timer_flag[timer1Sec2] == 1){
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <runCountDown7Seg1+0x78>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d130      	bne.n	80017e6 <runCountDown7Seg1+0x72>
		countDown2--;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <runCountDown7Seg1+0x7c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <runCountDown7Seg1+0x7c>)
 800178c:	6013      	str	r3, [r2, #0]
		setTimer(timer1Sec2, 100);
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	2006      	movs	r0, #6
 8001792:	f000 fab3 	bl	8001cfc <setTimer>
		EN2 = 0;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <runCountDown7Seg1+0x80>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
		EN3 = 1;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <runCountDown7Seg1+0x84>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <runCountDown7Seg1+0x80>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <runCountDown7Seg1+0x88>)
 80017b0:	f000 ff4f 	bl	8002652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <runCountDown7Seg1+0x84>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	480e      	ldr	r0, [pc, #56]	; (80017fc <runCountDown7Seg1+0x88>)
 80017c2:	f000 ff46 	bl	8002652 <HAL_GPIO_WritePin>
		display7Seg1(countDown2%10);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <runCountDown7Seg1+0x7c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <runCountDown7Seg1+0x8c>)
 80017cc:	fb83 1302 	smull	r1, r3, r3, r2
 80017d0:	1099      	asrs	r1, r3, #2
 80017d2:	17d3      	asrs	r3, r2, #31
 80017d4:	1ac9      	subs	r1, r1, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1ad1      	subs	r1, r2, r3
 80017e0:	4608      	mov	r0, r1
 80017e2:	f7ff faa7 	bl	8000d34 <display7Seg1>
	}
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000194 	.word	0x20000194
 80017f0:	200000fc 	.word	0x200000fc
 80017f4:	20000104 	.word	0x20000104
 80017f8:	2000004c 	.word	0x2000004c
 80017fc:	40010800 	.word	0x40010800
 8001800:	66666667 	.word	0x66666667

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fc22 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f82a 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f8b0 	bl	8001974 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001814:	f000 f862 	bl	80018dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SCH_Init();
 8001818:	f000 f920 	bl	8001a5c <SCH_Init>
//  setTimer(7, 5);
//  setTimer(8, 7);
//  setTimer(9, 9);
  SCH_Add_Task(InitAll, 15, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	210f      	movs	r1, #15
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <main+0x4c>)
 8001822:	f000 f94d 	bl	8001ac0 <SCH_Add_Task>
  SCH_Add_Task(AllTimer, 15, 10);
 8001826:	220a      	movs	r2, #10
 8001828:	210f      	movs	r1, #15
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <main+0x50>)
 800182c:	f000 f948 	bl	8001ac0 <SCH_Add_Task>
  SCH_Add_Task(AllKeyInput, 15, 10);
 8001830:	220a      	movs	r2, #10
 8001832:	210f      	movs	r1, #15
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <main+0x54>)
 8001836:	f000 f943 	bl	8001ac0 <SCH_Add_Task>
//  SCH_Add_Task(Toggle, 15, 100);
//  SCH_Add_Task(fsm_automatic, 1, 10);
  SCH_Add_Task(fsm_manual_run, 15, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	210f      	movs	r1, #15
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <main+0x58>)
 8001840:	f000 f93e 	bl	8001ac0 <SCH_Add_Task>
//  SCH_Init();
//  SCH_Add_Task(ledRed,10,300);
//  SCH_Add_Task(ledYellow,11,100);
//  SCH_Add_Task(ledGreen,10,200);

  HAL_TIM_Base_Start_IT(&htim2);
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <main+0x5c>)
 8001846:	f001 fb49 	bl	8002edc <HAL_TIM_Base_Start_IT>
//	  }
//	  if(timer_flag[9] == 1){
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//		  setTimer(9, 300);
//	  }
	  SCH_Dispatch_Tasks();
 800184a:	f000 f9d1 	bl	8001bf0 <SCH_Dispatch_Tasks>
 800184e:	e7fc      	b.n	800184a <main+0x46>
 8001850:	08000ad9 	.word	0x08000ad9
 8001854:	08001d7d 	.word	0x08001d7d
 8001858:	080002c9 	.word	0x080002c9
 800185c:	080005c9 	.word	0x080005c9
 8001860:	20000114 	.word	0x20000114

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	; 0x40
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	2228      	movs	r2, #40	; 0x28
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fef8 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188e:	2310      	movs	r3, #16
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fef2 	bl	8002684 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018a6:	f000 f8d3 	bl	8001a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 f95e 	bl	8002b84 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018ce:	f000 f8bf 	bl	8001a50 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3740      	adds	r7, #64	; 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM2_Init+0x94>)
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_TIM2_Init+0x94>)
 8001902:	f240 321f 	movw	r2, #799	; 0x31f
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <MX_TIM2_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM2_Init+0x94>)
 8001910:	2209      	movs	r2, #9
 8001912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <MX_TIM2_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_TIM2_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <MX_TIM2_Init+0x94>)
 8001922:	f001 fa8b 	bl	8002e3c <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800192c:	f000 f890 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4619      	mov	r1, r3
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <MX_TIM2_Init+0x94>)
 800193e:	f001 fc09 	bl	8003154 <HAL_TIM_ConfigClockSource>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001948:	f000 f882 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_TIM2_Init+0x94>)
 800195a:	f001 fde1 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001964:	f000 f874 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000114 	.word	0x20000114

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <MX_GPIO_Init+0xbc>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <MX_GPIO_Init+0xbc>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_GPIO_Init+0xbc>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <MX_GPIO_Init+0xbc>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <MX_GPIO_Init+0xbc>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_GPIO_Init+0xbc>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80019b8:	2200      	movs	r2, #0
 80019ba:	f647 417e 	movw	r1, #31870	; 0x7c7e
 80019be:	481d      	ldr	r0, [pc, #116]	; (8001a34 <MX_GPIO_Init+0xc0>)
 80019c0:	f000 fe47 	bl	8002652 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|B0_Pin|C0_Pin|C2_Pin
 80019c4:	2200      	movs	r2, #0
 80019c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019cc:	f000 fe41 	bl	8002652 <HAL_GPIO_WritePin>
                          |C1_Pin|D1_Pin|A2_Pin|B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin LED_RED_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80019d0:	f647 437e 	movw	r3, #31870	; 0x7c7e
 80019d4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <MX_GPIO_Init+0xc0>)
 80019ea:	f000 fca1 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80019ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_GPIO_Init+0xc0>)
 8001a04:	f000 fc94 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin B0_Pin C0_Pin C2_Pin
                           D2_Pin A3_Pin B3_Pin C3_Pin
                           D3_Pin D0_Pin A1_Pin B1_Pin
                           C1_Pin D1_Pin A2_Pin B2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|B0_Pin|C0_Pin|C2_Pin
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	60bb      	str	r3, [r7, #8]
                          |D2_Pin|A3_Pin|B3_Pin|C3_Pin
                          |D3_Pin|D0_Pin|A1_Pin|B1_Pin
                          |C1_Pin|D1_Pin|A2_Pin|B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2302      	movs	r3, #2
 8001a18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_GPIO_Init+0xc4>)
 8001a22:	f000 fc85 	bl	8002330 <HAL_GPIO_Init>

}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001a44:	f000 f81c 	bl	8001a80 <SCH_Update>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <SCH_Init>:
#include "main.h"

//#include "global.h ở .h", tạo SCH_task_G ở global
SCH_ListTasks ListTasks;

void SCH_Init ( void ) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	while(ListTasks.head != NULL){
 8001a60:	e002      	b.n	8001a68 <SCH_Init+0xc>
		SCH_Delete_Task(0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f8ec 	bl	8001c40 <SCH_Delete_Task>
	while(ListTasks.head != NULL){
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SCH_Init+0x20>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f8      	bne.n	8001a62 <SCH_Init+0x6>
	// Reset the global error variable
	// − SCH_Delete_Task () w ill generate an error code ,
	// ( because the task array i s empty)
	//Error_code_G = 0;
	//Timer_int () ;
	ListTasks.numTasks = 0;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <SCH_Init+0x20>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	721a      	strb	r2, [r3, #8]
	//Watchdog_init () ;
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000015c 	.word	0x2000015c

08001a80 <SCH_Update>:

void SCH_Update( void ) {
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
//		}
//		else{
//			ListTasks.head->Delay --;
//		}
//	}
	if(ListTasks.head!=NULL){
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <SCH_Update+0x3c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <SCH_Update+0x32>
		if(ListTasks.head->Delay>0){
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <SCH_Update+0x3c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <SCH_Update+0x20>
			ListTasks.head->Delay --;
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <SCH_Update+0x3c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	605a      	str	r2, [r3, #4]
		}
		if(ListTasks.head->Delay == 0){
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SCH_Update+0x3c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d103      	bne.n	8001ab2 <SCH_Update+0x32>
			ListTasks.head->RunMe = 1;
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SCH_Update+0x3c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	731a      	strb	r2, [r3, #12]
//			if(ListTasks.head->Period){
//				ListTasks.head->Delay = ListTasks.head->Period;
//			}
		}
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2000015c 	.word	0x2000015c

08001ac0 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
    // Kiểm tra danh sách đầy
    if (ListTasks.numTasks >= SCH_MAX_TASKS) {
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <SCH_Add_Task+0x12c>)
 8001ace:	7a1b      	ldrb	r3, [r3, #8]
 8001ad0:	2b27      	cmp	r3, #39	; 0x27
 8001ad2:	d901      	bls.n	8001ad8 <SCH_Add_Task+0x18>
        // Task list is full
        return SCH_MAX_TASKS;
 8001ad4:	2328      	movs	r3, #40	; 0x28
 8001ad6:	e085      	b.n	8001be4 <SCH_Add_Task+0x124>
    }

    // Tạo task mới
    sTask* newTask = (sTask*)malloc(sizeof(sTask));
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f001 fdb5 	bl	8003648 <malloc>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]
    if (newTask == NULL) {
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <SCH_Add_Task+0x2c>
        // Trường hợp malloc thất bại
        return SCH_MAX_TASKS; // Hoặc mã lỗi khác
 8001ae8:	2328      	movs	r3, #40	; 0x28
 8001aea:	e07b      	b.n	8001be4 <SCH_Add_Task+0x124>
    }

    // Khởi tạo các thuộc tính của task
    newTask->pTask = pFunction;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	601a      	str	r2, [r3, #0]
    newTask->Period = PERIOD;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
    newTask->RunMe = 0;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2200      	movs	r2, #0
 8001afc:	731a      	strb	r2, [r3, #12]
    newTask->Delay = DELAY;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	605a      	str	r2, [r3, #4]
    newTask->next = NULL;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    newTask->pre = NULL;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]

    // Nếu danh sách rỗng, thêm task vào đầu
    if (ListTasks.numTasks == 0) {
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <SCH_Add_Task+0x12c>)
 8001b12:	7a1b      	ldrb	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <SCH_Add_Task+0x66>
        ListTasks.head = newTask;
 8001b18:	4a34      	ldr	r2, [pc, #208]	; (8001bec <SCH_Add_Task+0x12c>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6013      	str	r3, [r2, #0]
        ListTasks.tail = newTask;
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <SCH_Add_Task+0x12c>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6053      	str	r3, [r2, #4]
 8001b24:	e056      	b.n	8001bd4 <SCH_Add_Task+0x114>
    } else {
        sTask* tmp = ListTasks.head;
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <SCH_Add_Task+0x12c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]

        // Kiểm tra nếu task mới có Delay nhỏ hơn head
        if (newTask->Delay < tmp->Delay) {
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d210      	bcs.n	8001b5a <SCH_Add_Task+0x9a>
            tmp->Delay -= newTask->Delay; // Giảm delay của head
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	605a      	str	r2, [r3, #4]
            newTask->next = tmp;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	615a      	str	r2, [r3, #20]
            tmp->pre = newTask;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	619a      	str	r2, [r3, #24]
            ListTasks.head = newTask; // Cập nhật head
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <SCH_Add_Task+0x12c>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e03c      	b.n	8001bd4 <SCH_Add_Task+0x114>
        } else {
            // Tìm vị trí phù hợp trong danh sách
            newTask->Delay -= tmp->Delay; // Delay tương đối
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	605a      	str	r2, [r3, #4]
            while (tmp->next != NULL && newTask->Delay >= tmp->next->Delay) {
 8001b68:	e00a      	b.n	8001b80 <SCH_Add_Task+0xc0>
                newTask->Delay -= tmp->next->Delay;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	1ad2      	subs	r2, r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]
                tmp = tmp->next;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	617b      	str	r3, [r7, #20]
            while (tmp->next != NULL && newTask->Delay >= tmp->next->Delay) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <SCH_Add_Task+0xd6>
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d2e9      	bcs.n	8001b6a <SCH_Add_Task+0xaa>
            }

            // Chèn task mới vào danh sách
            newTask->next = tmp->next;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
            newTask->pre = tmp;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

            if (tmp->next != NULL) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <SCH_Add_Task+0x108>
                tmp->next->pre = newTask;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	619a      	str	r2, [r3, #24]
                tmp->next->Delay -= newTask->Delay; // Điều chỉnh delay của task tiếp theo
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	1a8a      	subs	r2, r1, r2
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e002      	b.n	8001bce <SCH_Add_Task+0x10e>
            } else {
                // Nếu chèn vào cuối danh sách
                ListTasks.tail = newTask;
 8001bc8:	4a08      	ldr	r2, [pc, #32]	; (8001bec <SCH_Add_Task+0x12c>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6053      	str	r3, [r2, #4]
            }

            tmp->next = newTask;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
        }
    }

    // Cập nhật số lượng task
    ListTasks.numTasks++;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SCH_Add_Task+0x12c>)
 8001bd6:	7a1b      	ldrb	r3, [r3, #8]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <SCH_Add_Task+0x12c>)
 8001bde:	721a      	strb	r2, [r3, #8]

    return (unsigned char)ListTasks.numTasks;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <SCH_Add_Task+0x12c>)
 8001be2:	7a1b      	ldrb	r3, [r3, #8]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000015c 	.word	0x2000015c

08001bf0 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks( void ){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

	// Dispatches ( runs ) the next task ( i f one i s ready )
	if(ListTasks.head->RunMe == 1) {
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	7b1b      	ldrb	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d11b      	bne.n	8001c36 <SCH_Dispatch_Tasks+0x46>
		(* ListTasks.head->pTask) () ; // Run the task
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4798      	blx	r3
		ListTasks.head->RunMe = 0; // Reset / reduce RunMe fl a g
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	731a      	strb	r2, [r3, #12]
		// Periodic tasks w ill automatically run again
		// − i f thi s i s a ’one shot ’ task , remove i t from the array
		if ( ListTasks.head->Period != 0){
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(ListTasks.head->pTask, ListTasks.head->Period, ListTasks.head->Period);
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SCH_Dispatch_Tasks+0x4c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7ff ff48 	bl	8001ac0 <SCH_Add_Task>
		}
		SCH_Delete_Task(0) ;
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 f805 	bl	8001c40 <SCH_Delete_Task>
	}
	// Report system status
	//SCH_Report_Status () ;
	// The scheduler enters idle mode at thi s point
	//SCH_Go_To_Sleep() ;
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000015c 	.word	0x2000015c

08001c40 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task( const tByte TASK_INDEX) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
				//Return_code = RETURN_ERROR;
	} else {
		//Return_code = RETURN_NORMAL;
	}
	unsigned char i ;
	sTask* tmp = ListTasks.head;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
	for ( i = 0; i < TASK_INDEX; i ++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	75fb      	strb	r3, [r7, #23]
 8001c58:	e005      	b.n	8001c66 <SCH_Delete_Task+0x26>
		tmp = tmp->next;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
	for ( i = 0; i < TASK_INDEX; i ++) {
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	3301      	adds	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
 8001c66:	7dfa      	ldrb	r2, [r7, #23]
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3f5      	bcc.n	8001c5a <SCH_Delete_Task+0x1a>
	}
	if(tmp == ListTasks.head && tmp == ListTasks.tail){
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10b      	bne.n	8001c90 <SCH_Delete_Task+0x50>
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d106      	bne.n	8001c90 <SCH_Delete_Task+0x50>
		ListTasks.head = NULL;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
		ListTasks.tail = NULL;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	e025      	b.n	8001cdc <SCH_Delete_Task+0x9c>
	}
	else if(tmp == ListTasks.head){
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d108      	bne.n	8001cac <SCH_Delete_Task+0x6c>
		ListTasks.head = tmp->next;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001ca0:	6013      	str	r3, [r2, #0]
		ListTasks.head->pre = NULL;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	e017      	b.n	8001cdc <SCH_Delete_Task+0x9c>
	}
	else if(tmp == ListTasks.tail){
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d108      	bne.n	8001cc8 <SCH_Delete_Task+0x88>
		ListTasks.tail = tmp->pre;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001cbc:	6053      	str	r3, [r2, #4]
		ListTasks.tail->next = NULL;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
 8001cc6:	e009      	b.n	8001cdc <SCH_Delete_Task+0x9c>
	}
	else {
		(tmp->pre)->next = tmp->next;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	6952      	ldr	r2, [r2, #20]
 8001cd0:	615a      	str	r2, [r3, #20]
		(tmp->next)->pre = tmp->pre;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	6992      	ldr	r2, [r2, #24]
 8001cda:	619a      	str	r2, [r3, #24]
	}
	free(tmp);
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f001 fcbb 	bl	8003658 <free>
	ListTasks.numTasks --;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001ce4:	7a1b      	ldrb	r3, [r3, #8]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <SCH_Delete_Task+0xb8>)
 8001cec:	721a      	strb	r2, [r3, #8]
	return Return_code ; // return status
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000015c 	.word	0x2000015c

08001cfc <setTimer>:
#include "software_timer.h"

int timer_counter[no_timer];
int timer_flag[no_timer];

void setTimer(int index, int duration){
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001d06:	4907      	ldr	r1, [pc, #28]	; (8001d24 <setTimer+0x28>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <setTimer+0x2c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2100      	movs	r1, #0
 8001d16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000168 	.word	0x20000168
 8001d28:	20000194 	.word	0x20000194

08001d2c <runTimer>:

void runTimer(int index){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001d34:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <runTimer+0x48>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd13      	ble.n	8001d68 <runTimer+0x3c>
		timer_counter[index]--;
 8001d40:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <runTimer+0x48>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <runTimer+0x48>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <runTimer+0x48>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	dc04      	bgt.n	8001d68 <runTimer+0x3c>
			timer_flag[index] = 1;
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <runTimer+0x4c>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2101      	movs	r1, #1
 8001d64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000168 	.word	0x20000168
 8001d78:	20000194 	.word	0x20000194

08001d7c <AllTimer>:

void AllTimer(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	for(int i = 0; i < no_timer; i++){
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e005      	b.n	8001d94 <AllTimer+0x18>
		runTimer(i);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffcf 	bl	8001d2c <runTimer>
	for(int i = 0; i < no_timer; i++){
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	ddf6      	ble.n	8001d88 <AllTimer+0xc>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_MspInit+0x60>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_MspInit+0x60>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d113      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_TIM_Base_MspInit+0x44>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201c      	movs	r0, #28
 8001e38:	f000 fa43 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e3c:	201c      	movs	r0, #28
 8001e3e:	f000 fa5c 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 f921 	bl	80020dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM2_IRQHandler+0x10>)
 8001ea6:	f001 f865 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000114 	.word	0x20000114

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f001 fb86 	bl	80035f4 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20002800 	.word	0x20002800
 8001f14:	00000400 	.word	0x00000400
 8001f18:	20000108 	.word	0x20000108
 8001f1c:	200001d8 	.word	0x200001d8

08001f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <setRed1>:
 *      Author: Acer
 */

#include "traffic_light.h"

void setRed1(int status){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, status);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <setRed1+0x20>)
 8001f3e:	f000 fb88 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40010800 	.word	0x40010800

08001f50 <setYellow1>:
void setYellow1(int status){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, status);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <setYellow1+0x20>)
 8001f62:	f000 fb76 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40010800 	.word	0x40010800

08001f74 <setGreen1>:
void setGreen1(int status){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, status);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	2108      	movs	r1, #8
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <setGreen1+0x20>)
 8001f86:	f000 fb64 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40010800 	.word	0x40010800

08001f98 <setRed2>:

void setRed2(int status){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, status);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <setRed2+0x20>)
 8001faa:	f000 fb52 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40010800 	.word	0x40010800

08001fbc <setYellow2>:
void setYellow2(int status){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, status);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2120      	movs	r1, #32
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <setYellow2+0x20>)
 8001fce:	f000 fb40 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <setGreen2>:
void setGreen2(int status){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, status);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	2140      	movs	r1, #64	; 0x40
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <setGreen2+0x20>)
 8001ff2:	f000 fb2e 	bl	8002652 <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40010800 	.word	0x40010800

08002004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff ff8c 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800200a:	490c      	ldr	r1, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002020:	4c09      	ldr	r4, [pc, #36]	; (8002048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202e:	f001 fae7 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002032:	f7ff fbe7 	bl	8001804 <main>
  bx lr
 8002036:	4770      	bx	lr
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002040:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8002044:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002048:	200001d4 	.word	0x200001d4

0800204c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_2_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x28>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f923 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	200f      	movs	r0, #15
 8002068:	f000 f808 	bl	800207c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fe9a 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x54>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x58>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f93b 	bl	8002316 <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00e      	b.n	80020c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d80a      	bhi.n	80020c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b0:	2200      	movs	r2, #0
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	f000 f903 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <HAL_InitTick+0x5c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000050 	.word	0x20000050
 80020d4:	20000058 	.word	0x20000058
 80020d8:	20000054 	.word	0x20000054

080020dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_IncTick+0x1c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_IncTick+0x20>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_IncTick+0x20>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000058 	.word	0x20000058
 80020fc:	200001c0 	.word	0x200001c0

08002100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_GetTick+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	200001c0 	.word	0x200001c0

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4906      	ldr	r1, [pc, #24]	; (80021ac <__NVIC_EnableIRQ+0x34>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff90 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff2d 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff42 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff90 	bl	8002204 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5f 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff35 	bl	8002178 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b08b      	sub	sp, #44	; 0x2c
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e148      	b.n	80025d6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002344:	2201      	movs	r2, #1
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	f040 8137 	bne.w	80025d0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4aa3      	ldr	r2, [pc, #652]	; (80025f4 <HAL_GPIO_Init+0x2c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d05e      	beq.n	800242a <HAL_GPIO_Init+0xfa>
 800236c:	4aa1      	ldr	r2, [pc, #644]	; (80025f4 <HAL_GPIO_Init+0x2c4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d875      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 8002372:	4aa1      	ldr	r2, [pc, #644]	; (80025f8 <HAL_GPIO_Init+0x2c8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d058      	beq.n	800242a <HAL_GPIO_Init+0xfa>
 8002378:	4a9f      	ldr	r2, [pc, #636]	; (80025f8 <HAL_GPIO_Init+0x2c8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d86f      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 800237e:	4a9f      	ldr	r2, [pc, #636]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d052      	beq.n	800242a <HAL_GPIO_Init+0xfa>
 8002384:	4a9d      	ldr	r2, [pc, #628]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d869      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 800238a:	4a9d      	ldr	r2, [pc, #628]	; (8002600 <HAL_GPIO_Init+0x2d0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04c      	beq.n	800242a <HAL_GPIO_Init+0xfa>
 8002390:	4a9b      	ldr	r2, [pc, #620]	; (8002600 <HAL_GPIO_Init+0x2d0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d863      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 8002396:	4a9b      	ldr	r2, [pc, #620]	; (8002604 <HAL_GPIO_Init+0x2d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d046      	beq.n	800242a <HAL_GPIO_Init+0xfa>
 800239c:	4a99      	ldr	r2, [pc, #612]	; (8002604 <HAL_GPIO_Init+0x2d4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d85d      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d82a      	bhi.n	80023fc <HAL_GPIO_Init+0xcc>
 80023a6:	2b12      	cmp	r3, #18
 80023a8:	d859      	bhi.n	800245e <HAL_GPIO_Init+0x12e>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_GPIO_Init+0x80>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	0800242b 	.word	0x0800242b
 80023b4:	08002405 	.word	0x08002405
 80023b8:	08002417 	.word	0x08002417
 80023bc:	08002459 	.word	0x08002459
 80023c0:	0800245f 	.word	0x0800245f
 80023c4:	0800245f 	.word	0x0800245f
 80023c8:	0800245f 	.word	0x0800245f
 80023cc:	0800245f 	.word	0x0800245f
 80023d0:	0800245f 	.word	0x0800245f
 80023d4:	0800245f 	.word	0x0800245f
 80023d8:	0800245f 	.word	0x0800245f
 80023dc:	0800245f 	.word	0x0800245f
 80023e0:	0800245f 	.word	0x0800245f
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	0800245f 	.word	0x0800245f
 80023ec:	0800245f 	.word	0x0800245f
 80023f0:	0800245f 	.word	0x0800245f
 80023f4:	0800240d 	.word	0x0800240d
 80023f8:	08002421 	.word	0x08002421
 80023fc:	4a82      	ldr	r2, [pc, #520]	; (8002608 <HAL_GPIO_Init+0x2d8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002402:	e02c      	b.n	800245e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	623b      	str	r3, [r7, #32]
          break;
 800240a:	e029      	b.n	8002460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	3304      	adds	r3, #4
 8002412:	623b      	str	r3, [r7, #32]
          break;
 8002414:	e024      	b.n	8002460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	3308      	adds	r3, #8
 800241c:	623b      	str	r3, [r7, #32]
          break;
 800241e:	e01f      	b.n	8002460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	330c      	adds	r3, #12
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e01a      	b.n	8002460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002432:	2304      	movs	r3, #4
 8002434:	623b      	str	r3, [r7, #32]
          break;
 8002436:	e013      	b.n	8002460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002440:	2308      	movs	r3, #8
 8002442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	611a      	str	r2, [r3, #16]
          break;
 800244a:	e009      	b.n	8002460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	615a      	str	r2, [r3, #20]
          break;
 8002456:	e003      	b.n	8002460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x130>
          break;
 800245e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d801      	bhi.n	800246a <HAL_GPIO_Init+0x13a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	e001      	b.n	800246e <HAL_GPIO_Init+0x13e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3304      	adds	r3, #4
 800246e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2bff      	cmp	r3, #255	; 0xff
 8002474:	d802      	bhi.n	800247c <HAL_GPIO_Init+0x14c>
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	e002      	b.n	8002482 <HAL_GPIO_Init+0x152>
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	3b08      	subs	r3, #8
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	210f      	movs	r1, #15
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	6a39      	ldr	r1, [r7, #32]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8090 	beq.w	80025d0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024b0:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a55      	ldr	r2, [pc, #340]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6193      	str	r3, [r2, #24]
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c8:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_GPIO_Init+0x2e4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1e0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a48      	ldr	r2, [pc, #288]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1dc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_GPIO_Init+0x2ec>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1d8>
 8002504:	2302      	movs	r3, #2
 8002506:	e004      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 8002508:	2303      	movs	r3, #3
 800250a:	e002      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_GPIO_Init+0x1e2>
 8002510:	2300      	movs	r3, #0
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4093      	lsls	r3, r2
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002522:	493b      	ldr	r1, [pc, #236]	; (8002610 <HAL_GPIO_Init+0x2e0>)
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4937      	ldr	r1, [pc, #220]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800254a:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	4933      	ldr	r1, [pc, #204]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 8002554:	4013      	ands	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	492d      	ldr	r1, [pc, #180]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	43db      	mvns	r3, r3
 800257a:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800257c:	4013      	ands	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4923      	ldr	r1, [pc, #140]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	491f      	ldr	r1, [pc, #124]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4919      	ldr	r1, [pc, #100]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	4915      	ldr	r1, [pc, #84]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f aeaf 	bne.w	8002344 <HAL_GPIO_Init+0x14>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	372c      	adds	r7, #44	; 0x2c
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	10320000 	.word	0x10320000
 80025f8:	10310000 	.word	0x10310000
 80025fc:	10220000 	.word	0x10220000
 8002600:	10210000 	.word	0x10210000
 8002604:	10120000 	.word	0x10120000
 8002608:	10110000 	.word	0x10110000
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	40010800 	.word	0x40010800
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40011000 	.word	0x40011000
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	807b      	strh	r3, [r7, #2]
 800265e:	4613      	mov	r3, r2
 8002660:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002662:	787b      	ldrb	r3, [r7, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800266e:	e003      	b.n	8002678 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	041a      	lsls	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e26c      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8087 	beq.w	80027b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a4:	4b92      	ldr	r3, [pc, #584]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d00c      	beq.n	80026ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b0:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d112      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5e>
 80026bc:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d10b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ca:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d06c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x12c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d168      	bne.n	80027b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e246      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x76>
 80026ec:	4b80      	ldr	r3, [pc, #512]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e02e      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7a      	ldr	r2, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0xbc>
 8002726:	4b72      	ldr	r3, [pc, #456]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a71      	ldr	r2, [pc, #452]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6e      	ldr	r2, [pc, #440]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 8002740:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6a      	ldr	r2, [pc, #424]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a67      	ldr	r2, [pc, #412]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fcce 	bl	8002100 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fcca 	bl	8002100 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1fa      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xe4>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fcba 	bl	8002100 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fcb6 	bl	8002100 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1e6      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x10c>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027be:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x18c>
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x176>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1ba      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4939      	ldr	r1, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <HAL_RCC_OscConfig+0x270>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7ff fc6f 	bl	8002100 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff fc6b 	bl	8002100 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e19b      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4927      	ldr	r1, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x270>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fc4e 	bl	8002100 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff fc4a 	bl	8002100 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e17a      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03a      	beq.n	8002908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <HAL_RCC_OscConfig+0x274>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a0:	f7ff fc2e 	bl	8002100 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff fc2a 	bl	8002100 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e15a      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f000 fa9a 	bl	8002e00 <RCC_Delay>
 80028cc:	e01c      	b.n	8002908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_RCC_OscConfig+0x274>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7ff fc14 	bl	8002100 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028da:	e00f      	b.n	80028fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7ff fc10 	bl	8002100 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d908      	bls.n	80028fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e140      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	42420000 	.word	0x42420000
 80028f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b9e      	ldr	r3, [pc, #632]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e9      	bne.n	80028dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a6 	beq.w	8002a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b97      	ldr	r3, [pc, #604]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b94      	ldr	r3, [pc, #592]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a93      	ldr	r2, [pc, #588]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b8e      	ldr	r3, [pc, #568]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b8b      	ldr	r3, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a8a      	ldr	r2, [pc, #552]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff fbd1 	bl	8002100 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7ff fbcd 	bl	8002100 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0fd      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x312>
 8002988:	4b7b      	ldr	r3, [pc, #492]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a7a      	ldr	r2, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e02d      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x334>
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a75      	ldr	r2, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a72      	ldr	r2, [pc, #456]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	e01c      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x356>
 80029c0:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4a6c      	ldr	r2, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a63      	ldr	r2, [pc, #396]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7ff fb81 	bl	8002100 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7ff fb7d 	bl	8002100 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0ab      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ee      	beq.n	8002a02 <HAL_RCC_OscConfig+0x37e>
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7ff fb6b 	bl	8002100 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7ff fb67 	bl	8002100 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e095      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a47      	ldr	r2, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8081 	beq.w	8002b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a6c:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d061      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d146      	bne.n	8002b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <HAL_RCC_OscConfig+0x4fc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fb3b 	bl	8002100 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff fb37 	bl	8002100 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e067      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	492d      	ldr	r1, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a19      	ldr	r1, [r3, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	4927      	ldr	r1, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x4fc>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fb0b 	bl	8002100 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7ff fb07 	bl	8002100 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e037      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x46a>
 8002b0c:	e02f      	b.n	8002b6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_RCC_OscConfig+0x4fc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff faf4 	bl	8002100 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7ff faf0 	bl	8002100 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e020      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x498>
 8002b3a:	e018      	b.n	8002b6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e013      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42420060 	.word	0x42420060

08002b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0d0      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d910      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	4965      	ldr	r1, [pc, #404]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b63      	ldr	r3, [pc, #396]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0b8      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a58      	ldr	r2, [pc, #352]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf8:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b50      	ldr	r3, [pc, #320]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	494d      	ldr	r1, [pc, #308]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d040      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d115      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e07f      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e073      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06b      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c62:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4936      	ldr	r1, [pc, #216]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c74:	f7ff fa44 	bl	8002100 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7ff fa40 	bl	8002100 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e053      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 020c 	and.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1eb      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d210      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4922      	ldr	r1, [pc, #136]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e032      	b.n	8002d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4916      	ldr	r1, [pc, #88]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	490e      	ldr	r1, [pc, #56]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d12:	f000 f821 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	490a      	ldr	r1, [pc, #40]	; (8002d4c <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	5ccb      	ldrb	r3, [r1, r3]
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1cc>)
 8002d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1d0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f9a2 	bl	800207c <HAL_InitTick>

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08003818 	.word	0x08003818
 8002d50:	20000050 	.word	0x20000050
 8002d54:	20000054 	.word	0x20000054

08002d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_RCC_GetSysClockFreq+0x94>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x30>
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x36>
 8002d86:	e027      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d8a:	613b      	str	r3, [r7, #16]
      break;
 8002d8c:	e027      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0c9b      	lsrs	r3, r3, #18
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_GetSysClockFreq+0x94>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0c5b      	lsrs	r3, r3, #17
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002db2:	5cd3      	ldrb	r3, [r2, r3]
 8002db4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dba:	fb02 f203 	mul.w	r2, r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	613b      	str	r3, [r7, #16]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dda:	613b      	str	r3, [r7, #16]
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	693b      	ldr	r3, [r7, #16]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	08003828 	.word	0x08003828
 8002df8:	08003838 	.word	0x08003838
 8002dfc:	003d0900 	.word	0x003d0900

08002e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <RCC_Delay+0x34>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <RCC_Delay+0x38>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0a5b      	lsrs	r3, r3, #9
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e1c:	bf00      	nop
  }
  while (Delay --);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	60fa      	str	r2, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <RCC_Delay+0x1c>
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	20000050 	.word	0x20000050
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e041      	b.n	8002ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe ffd0 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 fa56 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e035      	b.n	8002f60 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_TIM_Base_Start_IT+0x90>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_TIM_Base_Start_IT+0x4e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d004      	beq.n	8002f2a <HAL_TIM_Base_Start_IT+0x4e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <HAL_TIM_Base_Start_IT+0x94>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d111      	bne.n	8002f4e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d010      	beq.n	8002f5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4c:	e007      	b.n	8002f5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400

08002f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f998 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f98b 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f99a 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0204 	mvn.w	r2, #4
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f972 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f965 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f974 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f94c 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f93f 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f94e 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0210 	mvn.w	r2, #16
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2208      	movs	r2, #8
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f926 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f919 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f928 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0201 	mvn.w	r2, #1
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fcae 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa6f 	bl	80035e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8f8 	bl	8003318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0220 	mvn.w	r2, #32
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa42 	bl	80035d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIM_ConfigClockSource+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e0b4      	b.n	80032da <HAL_TIM_ConfigClockSource+0x186>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800318e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d03e      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0xd4>
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	f200 8087 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	f000 8086 	beq.w	80032c6 <HAL_TIM_ConfigClockSource+0x172>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d87f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d01a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xa6>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d87b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b60      	cmp	r3, #96	; 0x60
 80031ca:	d050      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x11a>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d877      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d03c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xfa>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d873      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d058      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x13a>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d86f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d064      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d86b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d060      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d867      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d05a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	e062      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f000 f96a 	bl	80034e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800321c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
      break;
 8003226:	e04f      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f000 f953 	bl	80034e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e03c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 f8ca 	bl	80033f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2150      	movs	r1, #80	; 0x50
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f921 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 800326c:	e02c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f8e8 	bl	8003450 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2160      	movs	r1, #96	; 0x60
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f911 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 800328c:	e01c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f8aa 	bl	80033f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f901 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 80032ac:	e00c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 f8f8 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 80032be:	e003      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e000      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
	...

0800332c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <TIM_Base_SetConfig+0xc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_Base_SetConfig+0x28>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d003      	beq.n	8003354 <TIM_Base_SetConfig+0x28>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <TIM_Base_SetConfig+0xc4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d108      	bne.n	8003366 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <TIM_Base_SetConfig+0xc0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <TIM_Base_SetConfig+0x52>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003374:	d003      	beq.n	800337e <TIM_Base_SetConfig+0x52>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <TIM_Base_SetConfig+0xc4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <TIM_Base_SetConfig+0xc0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400

080033f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0201 	bic.w	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 030a 	bic.w	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	621a      	str	r2, [r3, #32]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f043 0307 	orr.w	r3, r3, #7
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e041      	b.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d004      	beq.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10c      	bne.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40000400 	.word	0x40000400

080035d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <__errno>:
 80035f4:	4b01      	ldr	r3, [pc, #4]	; (80035fc <__errno+0x8>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000005c 	.word	0x2000005c

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	2600      	movs	r6, #0
 8003604:	4d0c      	ldr	r5, [pc, #48]	; (8003638 <__libc_init_array+0x38>)
 8003606:	4c0d      	ldr	r4, [pc, #52]	; (800363c <__libc_init_array+0x3c>)
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	42a6      	cmp	r6, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	f000 f8f6 	bl	8003800 <_init>
 8003614:	2600      	movs	r6, #0
 8003616:	4d0a      	ldr	r5, [pc, #40]	; (8003640 <__libc_init_array+0x40>)
 8003618:	4c0a      	ldr	r4, [pc, #40]	; (8003644 <__libc_init_array+0x44>)
 800361a:	1b64      	subs	r4, r4, r5
 800361c:	10a4      	asrs	r4, r4, #2
 800361e:	42a6      	cmp	r6, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f855 3b04 	ldr.w	r3, [r5], #4
 8003628:	4798      	blx	r3
 800362a:	3601      	adds	r6, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003632:	4798      	blx	r3
 8003634:	3601      	adds	r6, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	0800383c 	.word	0x0800383c
 800363c:	0800383c 	.word	0x0800383c
 8003640:	0800383c 	.word	0x0800383c
 8003644:	08003840 	.word	0x08003840

08003648 <malloc>:
 8003648:	4b02      	ldr	r3, [pc, #8]	; (8003654 <malloc+0xc>)
 800364a:	4601      	mov	r1, r0
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	f000 b85f 	b.w	8003710 <_malloc_r>
 8003652:	bf00      	nop
 8003654:	2000005c 	.word	0x2000005c

08003658 <free>:
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <free+0xc>)
 800365a:	4601      	mov	r1, r0
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	f000 b80b 	b.w	8003678 <_free_r>
 8003662:	bf00      	nop
 8003664:	2000005c 	.word	0x2000005c

08003668 <memset>:
 8003668:	4603      	mov	r3, r0
 800366a:	4402      	add	r2, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <_free_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4605      	mov	r5, r0
 800367c:	2900      	cmp	r1, #0
 800367e:	d043      	beq.n	8003708 <_free_r+0x90>
 8003680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003684:	1f0c      	subs	r4, r1, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfb8      	it	lt
 800368a:	18e4      	addlt	r4, r4, r3
 800368c:	f000 f8aa 	bl	80037e4 <__malloc_lock>
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <_free_r+0x94>)
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	4610      	mov	r0, r2
 8003696:	b933      	cbnz	r3, 80036a6 <_free_r+0x2e>
 8003698:	6063      	str	r3, [r4, #4]
 800369a:	6014      	str	r4, [r2, #0]
 800369c:	4628      	mov	r0, r5
 800369e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036a2:	f000 b8a5 	b.w	80037f0 <__malloc_unlock>
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d90a      	bls.n	80036c0 <_free_r+0x48>
 80036aa:	6821      	ldr	r1, [r4, #0]
 80036ac:	1862      	adds	r2, r4, r1
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bf01      	itttt	eq
 80036b2:	681a      	ldreq	r2, [r3, #0]
 80036b4:	685b      	ldreq	r3, [r3, #4]
 80036b6:	1852      	addeq	r2, r2, r1
 80036b8:	6022      	streq	r2, [r4, #0]
 80036ba:	6063      	str	r3, [r4, #4]
 80036bc:	6004      	str	r4, [r0, #0]
 80036be:	e7ed      	b.n	800369c <_free_r+0x24>
 80036c0:	461a      	mov	r2, r3
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	b10b      	cbz	r3, 80036ca <_free_r+0x52>
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d9fa      	bls.n	80036c0 <_free_r+0x48>
 80036ca:	6811      	ldr	r1, [r2, #0]
 80036cc:	1850      	adds	r0, r2, r1
 80036ce:	42a0      	cmp	r0, r4
 80036d0:	d10b      	bne.n	80036ea <_free_r+0x72>
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	4401      	add	r1, r0
 80036d6:	1850      	adds	r0, r2, r1
 80036d8:	4283      	cmp	r3, r0
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	d1de      	bne.n	800369c <_free_r+0x24>
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4401      	add	r1, r0
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	6053      	str	r3, [r2, #4]
 80036e8:	e7d8      	b.n	800369c <_free_r+0x24>
 80036ea:	d902      	bls.n	80036f2 <_free_r+0x7a>
 80036ec:	230c      	movs	r3, #12
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	e7d4      	b.n	800369c <_free_r+0x24>
 80036f2:	6820      	ldr	r0, [r4, #0]
 80036f4:	1821      	adds	r1, r4, r0
 80036f6:	428b      	cmp	r3, r1
 80036f8:	bf01      	itttt	eq
 80036fa:	6819      	ldreq	r1, [r3, #0]
 80036fc:	685b      	ldreq	r3, [r3, #4]
 80036fe:	1809      	addeq	r1, r1, r0
 8003700:	6021      	streq	r1, [r4, #0]
 8003702:	6063      	str	r3, [r4, #4]
 8003704:	6054      	str	r4, [r2, #4]
 8003706:	e7c9      	b.n	800369c <_free_r+0x24>
 8003708:	bd38      	pop	{r3, r4, r5, pc}
 800370a:	bf00      	nop
 800370c:	2000010c 	.word	0x2000010c

08003710 <_malloc_r>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	1ccd      	adds	r5, r1, #3
 8003714:	f025 0503 	bic.w	r5, r5, #3
 8003718:	3508      	adds	r5, #8
 800371a:	2d0c      	cmp	r5, #12
 800371c:	bf38      	it	cc
 800371e:	250c      	movcc	r5, #12
 8003720:	2d00      	cmp	r5, #0
 8003722:	4606      	mov	r6, r0
 8003724:	db01      	blt.n	800372a <_malloc_r+0x1a>
 8003726:	42a9      	cmp	r1, r5
 8003728:	d903      	bls.n	8003732 <_malloc_r+0x22>
 800372a:	230c      	movs	r3, #12
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	2000      	movs	r0, #0
 8003730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003732:	f000 f857 	bl	80037e4 <__malloc_lock>
 8003736:	4921      	ldr	r1, [pc, #132]	; (80037bc <_malloc_r+0xac>)
 8003738:	680a      	ldr	r2, [r1, #0]
 800373a:	4614      	mov	r4, r2
 800373c:	b99c      	cbnz	r4, 8003766 <_malloc_r+0x56>
 800373e:	4f20      	ldr	r7, [pc, #128]	; (80037c0 <_malloc_r+0xb0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b923      	cbnz	r3, 800374e <_malloc_r+0x3e>
 8003744:	4621      	mov	r1, r4
 8003746:	4630      	mov	r0, r6
 8003748:	f000 f83c 	bl	80037c4 <_sbrk_r>
 800374c:	6038      	str	r0, [r7, #0]
 800374e:	4629      	mov	r1, r5
 8003750:	4630      	mov	r0, r6
 8003752:	f000 f837 	bl	80037c4 <_sbrk_r>
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d123      	bne.n	80037a2 <_malloc_r+0x92>
 800375a:	230c      	movs	r3, #12
 800375c:	4630      	mov	r0, r6
 800375e:	6033      	str	r3, [r6, #0]
 8003760:	f000 f846 	bl	80037f0 <__malloc_unlock>
 8003764:	e7e3      	b.n	800372e <_malloc_r+0x1e>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	1b5b      	subs	r3, r3, r5
 800376a:	d417      	bmi.n	800379c <_malloc_r+0x8c>
 800376c:	2b0b      	cmp	r3, #11
 800376e:	d903      	bls.n	8003778 <_malloc_r+0x68>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	441c      	add	r4, r3
 8003774:	6025      	str	r5, [r4, #0]
 8003776:	e004      	b.n	8003782 <_malloc_r+0x72>
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	42a2      	cmp	r2, r4
 800377c:	bf0c      	ite	eq
 800377e:	600b      	streq	r3, [r1, #0]
 8003780:	6053      	strne	r3, [r2, #4]
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f834 	bl	80037f0 <__malloc_unlock>
 8003788:	f104 000b 	add.w	r0, r4, #11
 800378c:	1d23      	adds	r3, r4, #4
 800378e:	f020 0007 	bic.w	r0, r0, #7
 8003792:	1ac2      	subs	r2, r0, r3
 8003794:	d0cc      	beq.n	8003730 <_malloc_r+0x20>
 8003796:	1a1b      	subs	r3, r3, r0
 8003798:	50a3      	str	r3, [r4, r2]
 800379a:	e7c9      	b.n	8003730 <_malloc_r+0x20>
 800379c:	4622      	mov	r2, r4
 800379e:	6864      	ldr	r4, [r4, #4]
 80037a0:	e7cc      	b.n	800373c <_malloc_r+0x2c>
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	f024 0403 	bic.w	r4, r4, #3
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d0e3      	beq.n	8003774 <_malloc_r+0x64>
 80037ac:	1a21      	subs	r1, r4, r0
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 f808 	bl	80037c4 <_sbrk_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d1dd      	bne.n	8003774 <_malloc_r+0x64>
 80037b8:	e7cf      	b.n	800375a <_malloc_r+0x4a>
 80037ba:	bf00      	nop
 80037bc:	2000010c 	.word	0x2000010c
 80037c0:	20000110 	.word	0x20000110

080037c4 <_sbrk_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	2300      	movs	r3, #0
 80037c8:	4d05      	ldr	r5, [pc, #20]	; (80037e0 <_sbrk_r+0x1c>)
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fe fb70 	bl	8001eb4 <_sbrk>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_sbrk_r+0x1a>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_sbrk_r+0x1a>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200001c4 	.word	0x200001c4

080037e4 <__malloc_lock>:
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <__malloc_lock+0x8>)
 80037e6:	f000 b809 	b.w	80037fc <__retarget_lock_acquire_recursive>
 80037ea:	bf00      	nop
 80037ec:	200001cc 	.word	0x200001cc

080037f0 <__malloc_unlock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__malloc_unlock+0x8>)
 80037f2:	f000 b804 	b.w	80037fe <__retarget_lock_release_recursive>
 80037f6:	bf00      	nop
 80037f8:	200001cc 	.word	0x200001cc

080037fc <__retarget_lock_acquire_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__retarget_lock_release_recursive>:
 80037fe:	4770      	bx	lr

08003800 <_init>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr

0800380c <_fini>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr
